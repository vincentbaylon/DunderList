{"ast":null,"code":"/*\n * node-sales-tax\n *\n * Copyright 2017, Valerian Saliou\n * Author: Valerian Saliou <valerian@valeriansaliou.name>\n */\n\"use strict\";\n\nvar request = require(\"request\");\n\nvar check_fraud_eu_vat = require(\"validate-vat\");\n\nvar validate_eu_vat = require(\"jsvat\");\n\nvar validate_us_vat = require(\"ein-validator\");\n\nvar regex_whitespace = /\\s/g;\nvar regex_eu_vat = /^[A-Z]{2}(.+)$/;\nvar regex_gb_vat = /^GB([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})$/;\nvar regex_ca_vat = /^[0-9]{9}$/;\nvar validate_gb_vat_url = \"https://api.service.hmrc.gov.uk/organisations/vat/check-vat-number/lookup\";\nvar validate_gb_vat_options = {\n  timeout: 20000\n};\n\nvar tax_rates = require(\"../res/sales_tax_rates.json\");\n\nvar region_countries = require(\"../res/region_countries.json\");\n\nvar tax_default_object = {\n  type: \"none\",\n  rate: 0.00\n};\n/**\n * SalesTax\n * @class\n * @classdesc  Instanciates a new sales tax object\n */\n\nvar SalesTax = function SalesTax() {\n  this.taxOriginCountry = null;\n  this.useRegionalTax = true;\n  this.enabledTaxNumberValidation = true;\n  this.enabledTaxNumberFraudCheck = false;\n};\n/**\n * SalesTax.prototype.hasSalesTax\n * @public\n * @param  {string}  countryCode\n * @return {boolean} Whether country has sales tax\n */\n\n\nSalesTax.prototype.hasSalesTax = function (countryCode) {\n  countryCode = (countryCode || \"\").toUpperCase();\n  return ((this.__readCurrentTaxRates(countryCode) || {}).rate || 0.00) > 0 ? true : false;\n};\n/**\n * SalesTax.prototype.hasStateSalesTax\n * @public\n * @param  {string}  countryCode\n * @param  {string}  stateCode\n * @return {boolean} Whether country state has sales tax\n */\n\n\nSalesTax.prototype.hasStateSalesTax = function (countryCode, stateCode) {\n  countryCode = (countryCode || \"\").toUpperCase();\n  stateCode = (stateCode || \"\").toUpperCase();\n  var stateTax = ((this.__readCurrentTaxRates(countryCode) || {}).states || {})[stateCode];\n  return ((stateTax || {}).rate || 0.00) > 0 ? true : false;\n};\n/**\n * SalesTax.prototype.getSalesTax\n * @public\n * @param  {string} countryCode\n * @param  {string} [stateCode]\n * @param  {string} [taxNumber]\n * @return {object} Promise object (returns the sales tax from 0 to 1)\n */\n\n\nSalesTax.prototype.getSalesTax = function (countryCode, stateCode, taxNumber) {\n  var self = this;\n  countryCode = (countryCode || \"\").toUpperCase();\n  stateCode = (stateCode || \"\").toUpperCase();\n  taxNumber = taxNumber || null; // Acquire target tax area\n\n  var targetArea = self.__getTargetArea(countryCode); // Acquire sales tax for country, or default (if no known sales tax)\n  // Notice: if regional tax is ignored, force national tax \\\n  //   (eg. EU w/o VAT MOSS)\n\n\n  var countryTax, stateTax;\n\n  if (targetArea === \"regional\" && this.useRegionalTax === false && this.taxOriginCountry !== null) {\n    countryTax = this.__readCurrentTaxRates(this.taxOriginCountry) || tax_default_object;\n    stateTax = tax_default_object;\n  } else {\n    countryTax = this.__readCurrentTaxRates(countryCode) || tax_default_object;\n    stateTax = (countryTax.states || {})[stateCode] || tax_default_object;\n  }\n\n  if (countryTax.rate > 0 || stateTax.rate > 0) {\n    return self.getTaxExchangeStatus(countryCode, stateCode, taxNumber).then(function (exchangeStatus) {\n      return Promise.resolve(self.__buildSalesTaxContext(countryTax, stateTax, exchangeStatus));\n    });\n  }\n\n  return Promise.resolve(self.__buildSalesTaxContext(countryTax, stateTax));\n};\n/**\n * SalesTax.prototype.getAmountWithSalesTax\n * @public\n * @param  {string} countryCode\n * @param  {string} [stateCode]\n * @param  {number} [amount]\n * @param  {string} [taxNumber]\n * @return {object} Promise object (returns the total tax amount)\n */\n\n\nSalesTax.prototype.getAmountWithSalesTax = function (countryCode, stateCode, amount, taxNumber) {\n  var self = this;\n  countryCode = (countryCode || \"\").toUpperCase();\n  stateCode = (stateCode || \"\").toUpperCase();\n  amount = amount || 0.00;\n  taxNumber = taxNumber || null; // Acquire sales tax, then process amount.\n\n  return self.getSalesTax(countryCode, stateCode, taxNumber).then(function (tax) {\n    // Generate amount details (list of all sub-amounts from each sub-tax \\\n    //   rate)\n    var amountDetails = [];\n\n    for (var i = 0; i < tax.details.length; i++) {\n      amountDetails.push({\n        type: tax.details[i].type,\n        rate: tax.details[i].rate,\n        amount: tax.details[i].rate * amount\n      });\n    } // Return total amount with sales tax\n\n\n    return Promise.resolve({\n      type: tax.type,\n      rate: tax.rate,\n      price: amount,\n      total: (1.00 + tax.rate) * amount,\n      area: tax.area,\n      exchange: tax.exchange,\n      charge: tax.charge,\n      details: amountDetails\n    });\n  });\n};\n/**\n * SalesTax.prototype.validateTaxNumber\n * @public\n * @param  {string} countryCode\n * @param  {string} taxNumber\n * @return {object} Promise object (returns a boolean for validity)\n */\n\n\nSalesTax.prototype.validateTaxNumber = function (countryCode, taxNumber) {\n  var self = this;\n  countryCode = (countryCode || \"\").toUpperCase();\n\n  if (self.enabledTaxNumberValidation === true) {\n    // Normalize tax number (eg. remove spaces)\n    var cleanTaxNumber = (taxNumber || \"\").replace(regex_whitespace, \"\");\n\n    if (cleanTaxNumber) {\n      // United States\n      if (countryCode === \"US\") {\n        // Validate US EIN\n        return Promise.resolve(validate_us_vat.isValid(cleanTaxNumber) && true);\n      } // Canada\n\n\n      if (countryCode === \"CA\") {\n        // Validate CA BN\n        return Promise.resolve(regex_ca_vat.test(cleanTaxNumber) && true);\n      } // United Kingdom\n\n\n      if (countryCode === \"GB\") {\n        return new Promise(function (resolve, reject) {\n          // Validate GB VAT number\n          var splitMatch = cleanTaxNumber.match(regex_gb_vat);\n          var isValid = splitMatch && splitMatch[1] ? true : false; // Check number for fraud? (online check)\n\n          if (isValid === true && self.enabledTaxNumberFraudCheck === true) {\n            // Query UK HMRC validation API\n            request.get(validate_gb_vat_url + \"/\" + splitMatch[1], validate_gb_vat_options, function (error, response) {\n              if (error) {\n                return reject(error);\n              }\n\n              return resolve(response.statusCode >= 200 && response.statusCode <= 299 ? true : false);\n            });\n          } else {\n            return resolve(isValid);\n          }\n        });\n      } // European Union member states (sourced from dynamic list)\n\n\n      if ((region_countries.EU || []).indexOf(countryCode) !== -1) {\n        return new Promise(function (resolve, reject) {\n          // Validate EU VAT number\n          var validationInfo = validate_eu_vat.checkVAT(cleanTaxNumber);\n          var isValid = validationInfo.isValid && true; // No country match?\n\n          if (isValid === true && ((validationInfo.country || {}).isoCode || {}).short !== countryCode) {\n            isValid = false;\n          } // Check number for fraud? (online check)\n\n\n          if (isValid === true && self.enabledTaxNumberFraudCheck === true) {\n            // Split VAT number (n extract actual VAT number)\n            var splitMatch = cleanTaxNumber.match(regex_eu_vat); // Check fraud on EU VAT number?\n\n            if (splitMatch && splitMatch[1]) {\n              check_fraud_eu_vat(countryCode, splitMatch[1], function (error, fraudInfo) {\n                if (error) {\n                  return reject(error);\n                } // Return whether valid or not\n\n\n                return resolve(fraudInfo.valid && true);\n              });\n            } else {\n              return resolve(false);\n            }\n          } else {\n            return resolve(isValid);\n          }\n        });\n      }\n    } // Consider as invalid tax number (tax number country not recognized, \\\n    //   or no tax number provided)\n\n\n    return Promise.resolve(false);\n  } // Consider all tax numbers as valid\n\n\n  return Promise.resolve(true);\n};\n/**\n * SalesTax.prototype.getTaxExchangeStatus\n * @public\n * @param  {string} countryCode\n * @param  {string} [stateCode]\n * @param  {string} [taxNumber]\n * @return {object} Promise object (returns an exchange status object)\n */\n\n\nSalesTax.prototype.getTaxExchangeStatus = function (countryCode, stateCode, taxNumber) {\n  var self = this;\n  countryCode = (countryCode || \"\").toUpperCase();\n  stateCode = (stateCode || \"\").toUpperCase() || null;\n  taxNumber = taxNumber || null;\n\n  var targetArea = self.__getTargetArea(countryCode); // Country or state (if any) has any sales tax?\n\n\n  if (self.__hasTotalSalesTax(countryCode, stateCode) === true) {\n    // Check for tax-exempt status? (if tax number is provided)\n    if (taxNumber) {\n      return self.validateTaxNumber(countryCode, taxNumber).then(function (isValid) {\n        // Consider valid numbers as tax-exempt (overrides exempt status if \\\n        //   area is national)\n        if (isValid === true) {\n          return Promise.resolve({\n            exchange: \"business\",\n            area: targetArea,\n            exempt: targetArea !== \"national\" && true\n          });\n        }\n\n        return Promise.resolve({\n          exchange: \"consumer\",\n          area: targetArea,\n          exempt: false\n        });\n      });\n    } // Consider as non tax-exempt\n\n\n    return Promise.resolve({\n      exchange: \"consumer\",\n      area: targetArea,\n      exempt: false\n    });\n  } // Consider as tax-exempt (country has no sales tax)\n\n\n  return Promise.resolve({\n    exchange: \"consumer\",\n    area: targetArea,\n    exempt: true\n  });\n};\n/**\n * SalesTax.prototype.setTaxOriginCountry\n * @public\n * @param  {string} countryCode\n * @return {undefined}\n */\n\n\nSalesTax.prototype.setTaxOriginCountry = function (countryCode, useRegionalTax) {\n  this.taxOriginCountry = (countryCode || \"\").toUpperCase() || null;\n\n  if (typeof useRegionalTax === \"boolean\") {\n    this.useRegionalTax = useRegionalTax;\n  }\n};\n/**\n * SalesTax.prototype.toggleEnabledTaxNumberValidation\n * @public\n * @param  {boolean} enabled\n * @return {undefined}\n */\n\n\nSalesTax.prototype.toggleEnabledTaxNumberValidation = function (enabled) {\n  this.enabledTaxNumberValidation = enabled && true;\n};\n/**\n * SalesTax.prototype.toggleEnabledTaxNumberFraudCheck\n * @public\n * @param  {boolean} enabled\n * @return {undefined}\n */\n\n\nSalesTax.prototype.toggleEnabledTaxNumberFraudCheck = function (enabled) {\n  this.enabledTaxNumberFraudCheck = enabled && true;\n};\n/**\n * SalesTax.prototype.__getTargetArea\n * @private\n * @param  {string} countryCode\n * @return {string} Target area\n */\n\n\nSalesTax.prototype.__getTargetArea = function (countryCode) {\n  // Default to worldwide\n  var targetArea = \"worldwide\";\n\n  if (this.taxOriginCountry !== null) {\n    if (this.taxOriginCountry === countryCode) {\n      // Same country (national)\n      targetArea = \"national\";\n    } else {\n      // Same economic community? (regional)\n      for (var region in region_countries) {\n        var regionCountries = region_countries[region];\n\n        if (regionCountries.indexOf(this.taxOriginCountry) !== -1 && regionCountries.indexOf(countryCode) !== -1) {\n          targetArea = \"regional\";\n          break;\n        }\n      }\n    }\n  }\n\n  return targetArea;\n};\n/**\n * SalesTax.prototype.__buildSalesTaxContext\n * @private\n * @param  {object} countryTax\n * @param  {object} stateTax\n * @param  {object} [exchangeStatus]\n * @return {object} Sales tax context object\n */\n\n\nSalesTax.prototype.__buildSalesTaxContext = function (countryTax, stateTax, exchangeStatus) {\n  // Acquire exchange + exempt + area\n  var taxExchange = (exchangeStatus || {}).exchange || \"consumer\";\n  var taxArea = (exchangeStatus || {}).area || \"worldwide\";\n  var isExempt = (exchangeStatus || {}).exempt || false;\n  var fullRate = countryTax.rate + stateTax.rate; // Generate tax type (multiple sales tax may apply, eg. country + state)\n\n  var type = countryTax.type;\n\n  if (stateTax.rate > 0) {\n    if (countryTax.rate > 0) {\n      type = type + \"+\" + stateTax.type;\n    } else {\n      type = stateTax.type;\n    }\n  } // Build charge object\n\n\n  var taxCharge = {};\n\n  if (type !== \"none\") {\n    taxCharge.direct = !isExempt;\n    taxCharge.reverse = isExempt && fullRate > 0 && true;\n  } else {\n    taxCharge.direct = false;\n    taxCharge.reverse = false;\n  } // Build details object (list of all sub-taxes that make up the total rate)\n\n\n  var taxDetails = [];\n\n  if (isExempt !== true) {\n    if (countryTax.rate > 0) {\n      taxDetails.push({\n        type: countryTax.type,\n        rate: countryTax.rate\n      });\n    }\n\n    if (stateTax.rate > 0) {\n      taxDetails.push({\n        type: stateTax.type,\n        rate: stateTax.rate\n      });\n    }\n  } // Build sales tax context\n\n\n  return {\n    type: type,\n    rate: isExempt === true ? 0.00 : fullRate,\n    area: taxArea,\n    exchange: taxExchange,\n    charge: taxCharge,\n    details: taxDetails\n  };\n};\n/**\n * SalesTax.prototype.__readCurrentTaxRates\n * @private\n * @param  {object} countryCode\n * @return {object} Current tax rates\n */\n\n\nSalesTax.prototype.__readCurrentTaxRates = function (countryCode) {\n  var countryTaxRates = tax_rates[countryCode]; // Check tax rates before date? (if any defined)\n\n  if (typeof (countryTaxRates || {}).before === \"object\") {\n    var nowDate = this.__getCurrentDate();\n\n    var lowestBeforeDateString = null;\n    var lowestBeforeDate = null;\n\n    for (var beforeDateString in countryTaxRates.before) {\n      // Parse date string to an actual date object\n      // Notice: the date string uses an UTC+00:00 timezone, which gets parsed \\\n      //   into the runtime-local timezone, and compared against current date.\n      var beforeDate = new Date(beforeDateString); // Date is invalid? Throw an error, as we need to be clear that the \\\n      //   tax rates object is invalid.\n\n      if (isNaN(beforeDate.getTime()) === true) {\n        throw new Error(\"Invalid 'before' date string: \" + beforeDateString);\n      } // Are we still in the past relative to this country sales tax \\\n      //   rates? Then, pickup this tax rate (until we get past-date, and \\\n      //   then we can use the latest/master tax rate)\n\n\n      if (nowDate < beforeDate) {\n        // New lowest before date? (or none previously-defined)\n        // Notice: pick the lowest found before date, as multiple 'before' \\\n        //   dates can be defined as to schedule multiple tax rate changes in \\\n        //   the future. Thus, we do not want to pick the first 'before' match.\n        if (lowestBeforeDate === null || beforeDate < lowestBeforeDate) {\n          lowestBeforeDate = beforeDate;\n          lowestBeforeDateString = beforeDateString;\n        }\n      }\n    }\n\n    if (lowestBeforeDateString !== null) {\n      return countryTaxRates.before[lowestBeforeDateString];\n    }\n  }\n\n  return countryTaxRates;\n};\n/**\n * SalesTax.prototype.__hasTotalSalesTax\n * @private\n * @param  {string}  countryCode\n * @param  {string}  stateCode\n * @return {boolean} Whether country and state added result in a tax or not\n */\n\n\nSalesTax.prototype.__hasTotalSalesTax = function (countryCode, stateCode) {\n  countryCode = (countryCode || \"\").toUpperCase();\n  stateCode = (stateCode || \"\").toUpperCase();\n  var taxRates = this.__readCurrentTaxRates(countryCode) || {};\n  var countryTax = taxRates.rate || 0.00;\n  var stateTax = 0.0;\n\n  if (stateCode) {\n    stateTax = ((taxRates.states || {})[stateCode] || {}).rate || 0.00;\n  }\n\n  return countryTax + stateTax > 0 ? true : false;\n};\n/**\n * SalesTax.prototype.__getCurrentDate\n * @private\n * @return {object} Current date\n */\n\n\nSalesTax.prototype.__getCurrentDate = function () {\n  // Return current date\n  // Notice: this function is useless as-is, though it comes handy when \\\n  //   unit-testing the library, as it lets us override current date with \\\n  //   an hardcoded date, eg. to test the automated sales tax change feature.\n  return new Date();\n};\n\nmodule.exports = new SalesTax();","map":{"version":3,"sources":["/Users/vinceboogie/Development/DunderList/node_modules/sales-tax/lib/sales_tax.js"],"names":["request","require","check_fraud_eu_vat","validate_eu_vat","validate_us_vat","regex_whitespace","regex_eu_vat","regex_gb_vat","regex_ca_vat","validate_gb_vat_url","validate_gb_vat_options","timeout","tax_rates","region_countries","tax_default_object","type","rate","SalesTax","taxOriginCountry","useRegionalTax","enabledTaxNumberValidation","enabledTaxNumberFraudCheck","prototype","hasSalesTax","countryCode","toUpperCase","__readCurrentTaxRates","hasStateSalesTax","stateCode","stateTax","states","getSalesTax","taxNumber","self","targetArea","__getTargetArea","countryTax","getTaxExchangeStatus","then","exchangeStatus","Promise","resolve","__buildSalesTaxContext","getAmountWithSalesTax","amount","tax","amountDetails","i","details","length","push","price","total","area","exchange","charge","validateTaxNumber","cleanTaxNumber","replace","isValid","test","reject","splitMatch","match","get","error","response","statusCode","EU","indexOf","validationInfo","checkVAT","country","isoCode","short","fraudInfo","valid","__hasTotalSalesTax","exempt","setTaxOriginCountry","toggleEnabledTaxNumberValidation","enabled","toggleEnabledTaxNumberFraudCheck","region","regionCountries","taxExchange","taxArea","isExempt","fullRate","taxCharge","direct","reverse","taxDetails","countryTaxRates","before","nowDate","__getCurrentDate","lowestBeforeDateString","lowestBeforeDate","beforeDateString","beforeDate","Date","isNaN","getTime","Error","taxRates","module","exports"],"mappings":"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","sourcesContent":["/*\n * node-sales-tax\n *\n * Copyright 2017, Valerian Saliou\n * Author: Valerian Saliou <valerian@valeriansaliou.name>\n */\n\n\n\"use strict\";\n\n\nvar request = require(\"request\");\nvar check_fraud_eu_vat = require(\"validate-vat\");\nvar validate_eu_vat = require(\"jsvat\");\nvar validate_us_vat = require(\"ein-validator\");\n\nvar regex_whitespace = /\\s/g;\nvar regex_eu_vat = /^[A-Z]{2}(.+)$/;\nvar regex_gb_vat = /^GB([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})$/;\nvar regex_ca_vat = /^[0-9]{9}$/;\n\nvar validate_gb_vat_url = (\n  \"https://api.service.hmrc.gov.uk/organisations/vat/check-vat-number/lookup\"\n);\nvar validate_gb_vat_options = {\n  timeout : 20000\n};\n\nvar tax_rates = require(\"../res/sales_tax_rates.json\");\nvar region_countries = require(\"../res/region_countries.json\");\n\nvar tax_default_object = {\n  type : \"none\",\n  rate : 0.00\n};\n\n\n/**\n * SalesTax\n * @class\n * @classdesc  Instanciates a new sales tax object\n */\nvar SalesTax = function() {\n  this.taxOriginCountry = null;\n  this.useRegionalTax = true;\n  this.enabledTaxNumberValidation = true;\n  this.enabledTaxNumberFraudCheck = false;\n};\n\n\n/**\n * SalesTax.prototype.hasSalesTax\n * @public\n * @param  {string}  countryCode\n * @return {boolean} Whether country has sales tax\n */\nSalesTax.prototype.hasSalesTax = function(\n  countryCode\n) {\n  countryCode = (countryCode || \"\").toUpperCase();\n\n  return (\n    (((this.__readCurrentTaxRates(countryCode) || {}).rate || 0.00) > 0) ?\n      true : false\n  );\n};\n\n\n/**\n * SalesTax.prototype.hasStateSalesTax\n * @public\n * @param  {string}  countryCode\n * @param  {string}  stateCode\n * @return {boolean} Whether country state has sales tax\n */\nSalesTax.prototype.hasStateSalesTax = function(\n  countryCode, stateCode\n) {\n  countryCode = (countryCode || \"\").toUpperCase();\n  stateCode = (stateCode || \"\").toUpperCase();\n\n  var stateTax = (\n    ((this.__readCurrentTaxRates(countryCode) || {}).states || {})[stateCode]\n  );\n\n  return (\n    (((stateTax || {}).rate || 0.00) > 0) ? true : false\n  );\n};\n\n\n/**\n * SalesTax.prototype.getSalesTax\n * @public\n * @param  {string} countryCode\n * @param  {string} [stateCode]\n * @param  {string} [taxNumber]\n * @return {object} Promise object (returns the sales tax from 0 to 1)\n */\nSalesTax.prototype.getSalesTax = function(\n  countryCode, stateCode, taxNumber\n) {\n  var self = this;\n\n  countryCode = (countryCode || \"\").toUpperCase();\n  stateCode = (stateCode || \"\").toUpperCase();\n  taxNumber = (taxNumber || null);\n\n  // Acquire target tax area\n  var targetArea = self.__getTargetArea(countryCode);\n\n  // Acquire sales tax for country, or default (if no known sales tax)\n  // Notice: if regional tax is ignored, force national tax \\\n  //   (eg. EU w/o VAT MOSS)\n  var countryTax, stateTax;\n\n  if (targetArea === \"regional\" && this.useRegionalTax === false &&\n        this.taxOriginCountry !== null) {\n    countryTax = (\n      this.__readCurrentTaxRates(this.taxOriginCountry) || tax_default_object\n    );\n\n    stateTax = tax_default_object;\n  } else {\n    countryTax = (\n      this.__readCurrentTaxRates(countryCode) || tax_default_object\n    );\n\n    stateTax = ((countryTax.states || {})[stateCode] || tax_default_object);\n  }\n\n  if (countryTax.rate > 0 || stateTax.rate > 0) {\n    return self.getTaxExchangeStatus(countryCode, stateCode, taxNumber)\n      .then(function(exchangeStatus) {\n        return Promise.resolve(\n          self.__buildSalesTaxContext(countryTax, stateTax, exchangeStatus)\n        );\n      });\n  }\n\n  return Promise.resolve(\n    self.__buildSalesTaxContext(countryTax, stateTax)\n  );\n};\n\n\n/**\n * SalesTax.prototype.getAmountWithSalesTax\n * @public\n * @param  {string} countryCode\n * @param  {string} [stateCode]\n * @param  {number} [amount]\n * @param  {string} [taxNumber]\n * @return {object} Promise object (returns the total tax amount)\n */\nSalesTax.prototype.getAmountWithSalesTax = function(\n  countryCode, stateCode, amount, taxNumber\n) {\n  var self = this;\n\n  countryCode = (countryCode || \"\").toUpperCase();\n  stateCode = (stateCode || \"\").toUpperCase();\n  amount = (amount || 0.00);\n  taxNumber = (taxNumber || null);\n\n  // Acquire sales tax, then process amount.\n  return self.getSalesTax(countryCode, stateCode, taxNumber)\n    .then(function(tax) {\n      // Generate amount details (list of all sub-amounts from each sub-tax \\\n      //   rate)\n      var amountDetails = [];\n\n      for (var i = 0; i < tax.details.length; i++) {\n        amountDetails.push({\n          type   : tax.details[i].type,\n          rate   : tax.details[i].rate,\n          amount : tax.details[i].rate * amount\n        });\n      }\n\n      // Return total amount with sales tax\n      return Promise.resolve({\n        type     : tax.type,\n        rate     : tax.rate,\n        price    : amount,\n        total    : (1.00 + tax.rate) * amount,\n        area     : tax.area,\n        exchange : tax.exchange,\n        charge   : tax.charge,\n        details  : amountDetails\n      });\n    });\n};\n\n\n/**\n * SalesTax.prototype.validateTaxNumber\n * @public\n * @param  {string} countryCode\n * @param  {string} taxNumber\n * @return {object} Promise object (returns a boolean for validity)\n */\nSalesTax.prototype.validateTaxNumber = function(\n  countryCode, taxNumber\n) {\n  var self = this;\n\n  countryCode = (countryCode || \"\").toUpperCase();\n\n  if (self.enabledTaxNumberValidation === true) {\n    // Normalize tax number (eg. remove spaces)\n    var cleanTaxNumber = (taxNumber || \"\").replace(regex_whitespace, \"\");\n\n    if (cleanTaxNumber) {\n      // United States\n      if (countryCode === \"US\") {\n        // Validate US EIN\n        return Promise.resolve(\n          validate_us_vat.isValid(cleanTaxNumber) && true\n        );\n      }\n\n      // Canada\n      if (countryCode === \"CA\") {\n        // Validate CA BN\n        return Promise.resolve(\n          regex_ca_vat.test(cleanTaxNumber) && true\n        );\n      }\n\n      // United Kingdom\n      if (countryCode === \"GB\") {\n        return new Promise(function(resolve, reject) {\n          // Validate GB VAT number\n          var splitMatch = cleanTaxNumber.match(regex_gb_vat);\n          var isValid = ((splitMatch && splitMatch[1]) ? true : false);\n\n          // Check number for fraud? (online check)\n          if (isValid === true && self.enabledTaxNumberFraudCheck === true) {\n            // Query UK HMRC validation API\n            request.get(\n              (validate_gb_vat_url + \"/\" + splitMatch[1]),\n              validate_gb_vat_options,\n\n              function(error, response) {\n                if (error) {\n                  return reject(error);\n                }\n\n                return resolve(\n                  (response.statusCode >= 200 && response.statusCode <= 299) ?\n                    true : false\n                );\n              }\n            );\n          } else {\n            return resolve(isValid);\n          }\n        });\n      }\n\n      // European Union member states (sourced from dynamic list)\n      if ((region_countries.EU || []).indexOf(countryCode) !== -1) {\n        return new Promise(function(resolve, reject) {\n          // Validate EU VAT number\n          var validationInfo = validate_eu_vat.checkVAT(cleanTaxNumber);\n          var isValid = (validationInfo.isValid && true);\n\n          // No country match?\n          if (isValid === true &&\n                ((validationInfo.country || {}).isoCode || {}).short !==\n                  countryCode) {\n            isValid = false;\n          }\n\n          // Check number for fraud? (online check)\n          if (isValid === true && self.enabledTaxNumberFraudCheck === true) {\n            // Split VAT number (n extract actual VAT number)\n            var splitMatch = cleanTaxNumber.match(regex_eu_vat);\n\n            // Check fraud on EU VAT number?\n            if (splitMatch && splitMatch[1]) {\n              check_fraud_eu_vat(\n                countryCode, splitMatch[1],\n\n                function(error, fraudInfo) {\n                  if (error) {\n                    return reject(error);\n                  }\n\n                  // Return whether valid or not\n                  return resolve(fraudInfo.valid && true);\n                }\n              );\n            } else {\n              return resolve(false);\n            }\n          } else {\n            return resolve(isValid);\n          }\n        });\n      }\n    }\n\n    // Consider as invalid tax number (tax number country not recognized, \\\n    //   or no tax number provided)\n    return Promise.resolve(false);\n  }\n\n  // Consider all tax numbers as valid\n  return Promise.resolve(true);\n};\n\n\n/**\n * SalesTax.prototype.getTaxExchangeStatus\n * @public\n * @param  {string} countryCode\n * @param  {string} [stateCode]\n * @param  {string} [taxNumber]\n * @return {object} Promise object (returns an exchange status object)\n */\nSalesTax.prototype.getTaxExchangeStatus = function(\n  countryCode, stateCode, taxNumber\n) {\n  var self = this;\n\n  countryCode = (countryCode || \"\").toUpperCase();\n  stateCode = ((stateCode || \"\").toUpperCase() || null);\n  taxNumber = (taxNumber || null);\n\n  var targetArea = self.__getTargetArea(countryCode);\n\n  // Country or state (if any) has any sales tax?\n  if (self.__hasTotalSalesTax(countryCode, stateCode) === true) {\n    // Check for tax-exempt status? (if tax number is provided)\n    if (taxNumber) {\n      return self.validateTaxNumber(countryCode, taxNumber)\n        .then(function(isValid) {\n          // Consider valid numbers as tax-exempt (overrides exempt status if \\\n          //   area is national)\n          if (isValid === true) {\n            return Promise.resolve({\n              exchange : \"business\",\n              area     : targetArea,\n              exempt   : (targetArea !== \"national\" && true)\n            });\n          }\n\n          return Promise.resolve({\n            exchange : \"consumer\",\n            area     : targetArea,\n            exempt   : false\n          });\n        });\n    }\n\n    // Consider as non tax-exempt\n    return Promise.resolve({\n      exchange : \"consumer\",\n      area     : targetArea,\n      exempt   : false\n    });\n  }\n\n  // Consider as tax-exempt (country has no sales tax)\n  return Promise.resolve({\n    exchange : \"consumer\",\n    area     : targetArea,\n    exempt   : true\n  });\n};\n\n\n/**\n * SalesTax.prototype.setTaxOriginCountry\n * @public\n * @param  {string} countryCode\n * @return {undefined}\n */\nSalesTax.prototype.setTaxOriginCountry = function(\n  countryCode, useRegionalTax\n) {\n  this.taxOriginCountry = ((countryCode || \"\").toUpperCase() || null);\n\n  if (typeof useRegionalTax === \"boolean\") {\n    this.useRegionalTax = useRegionalTax;\n  }\n};\n\n\n/**\n * SalesTax.prototype.toggleEnabledTaxNumberValidation\n * @public\n * @param  {boolean} enabled\n * @return {undefined}\n */\nSalesTax.prototype.toggleEnabledTaxNumberValidation = function(\n  enabled\n) {\n  this.enabledTaxNumberValidation = (enabled && true);\n};\n\n\n/**\n * SalesTax.prototype.toggleEnabledTaxNumberFraudCheck\n * @public\n * @param  {boolean} enabled\n * @return {undefined}\n */\nSalesTax.prototype.toggleEnabledTaxNumberFraudCheck = function(\n  enabled\n) {\n  this.enabledTaxNumberFraudCheck = (enabled && true);\n};\n\n\n/**\n * SalesTax.prototype.__getTargetArea\n * @private\n * @param  {string} countryCode\n * @return {string} Target area\n */\nSalesTax.prototype.__getTargetArea = function(\n  countryCode\n) {\n  // Default to worldwide\n  var targetArea = \"worldwide\";\n\n  if (this.taxOriginCountry !== null) {\n    if (this.taxOriginCountry === countryCode) {\n      // Same country (national)\n      targetArea = \"national\";\n    } else {\n      // Same economic community? (regional)\n      for (var region in region_countries) {\n        var regionCountries = region_countries[region];\n\n        if (regionCountries.indexOf(this.taxOriginCountry) !== -1 &&\n              regionCountries.indexOf(countryCode) !== -1) {\n          targetArea = \"regional\";\n\n          break;\n        }\n      }\n    }\n  }\n\n  return targetArea;\n};\n\n\n/**\n * SalesTax.prototype.__buildSalesTaxContext\n * @private\n * @param  {object} countryTax\n * @param  {object} stateTax\n * @param  {object} [exchangeStatus]\n * @return {object} Sales tax context object\n */\nSalesTax.prototype.__buildSalesTaxContext = function(\n  countryTax, stateTax, exchangeStatus\n) {\n  // Acquire exchange + exempt + area\n  var taxExchange = ((exchangeStatus || {}).exchange || \"consumer\");\n  var taxArea = ((exchangeStatus || {}).area || \"worldwide\");\n  var isExempt = ((exchangeStatus || {}).exempt || false);\n  var fullRate = (countryTax.rate + stateTax.rate);\n\n  // Generate tax type (multiple sales tax may apply, eg. country + state)\n  var type = countryTax.type;\n\n  if (stateTax.rate > 0) {\n    if (countryTax.rate > 0) {\n      type = type + \"+\" + stateTax.type;\n    } else {\n      type = stateTax.type;\n    }\n  }\n\n  // Build charge object\n  var taxCharge = {};\n\n  if (type !== \"none\") {\n    taxCharge.direct = !isExempt;\n    taxCharge.reverse = (isExempt && fullRate > 0 && true);\n  } else {\n    taxCharge.direct = false;\n    taxCharge.reverse = false;\n  }\n\n  // Build details object (list of all sub-taxes that make up the total rate)\n  var taxDetails = [];\n\n  if (isExempt !== true) {\n    if (countryTax.rate > 0) {\n      taxDetails.push({\n        type : countryTax.type,\n        rate : countryTax.rate\n      });\n    }\n    if (stateTax.rate > 0) {\n      taxDetails.push({\n        type : stateTax.type,\n        rate : stateTax.rate\n      });\n    }\n  }\n\n  // Build sales tax context\n  return {\n    type     : type,\n    rate     : (isExempt === true) ? 0.00 : fullRate,\n    area     : taxArea,\n    exchange : taxExchange,\n    charge   : taxCharge,\n    details  : taxDetails\n  };\n};\n\n\n/**\n * SalesTax.prototype.__readCurrentTaxRates\n * @private\n * @param  {object} countryCode\n * @return {object} Current tax rates\n */\nSalesTax.prototype.__readCurrentTaxRates = function(\n  countryCode\n) {\n  var countryTaxRates = tax_rates[countryCode];\n\n  // Check tax rates before date? (if any defined)\n  if (typeof (countryTaxRates || {}).before === \"object\") {\n    var nowDate = this.__getCurrentDate();\n\n    var lowestBeforeDateString = null;\n    var lowestBeforeDate = null;\n\n    for (var beforeDateString in countryTaxRates.before) {\n      // Parse date string to an actual date object\n      // Notice: the date string uses an UTC+00:00 timezone, which gets parsed \\\n      //   into the runtime-local timezone, and compared against current date.\n      var beforeDate = (new Date(beforeDateString));\n\n      // Date is invalid? Throw an error, as we need to be clear that the \\\n      //   tax rates object is invalid.\n      if (isNaN(beforeDate.getTime()) === true) {\n        throw new Error(\"Invalid 'before' date string: \" + beforeDateString);\n      }\n\n      // Are we still in the past relative to this country sales tax \\\n      //   rates? Then, pickup this tax rate (until we get past-date, and \\\n      //   then we can use the latest/master tax rate)\n      if (nowDate < beforeDate) {\n        // New lowest before date? (or none previously-defined)\n        // Notice: pick the lowest found before date, as multiple 'before' \\\n        //   dates can be defined as to schedule multiple tax rate changes in \\\n        //   the future. Thus, we do not want to pick the first 'before' match.\n        if (lowestBeforeDate === null || beforeDate < lowestBeforeDate) {\n          lowestBeforeDate = beforeDate;\n          lowestBeforeDateString = beforeDateString;\n        }\n      }\n    }\n\n    if (lowestBeforeDateString !== null) {\n      return countryTaxRates.before[lowestBeforeDateString];\n    }\n  }\n\n  return countryTaxRates;\n};\n\n\n/**\n * SalesTax.prototype.__hasTotalSalesTax\n * @private\n * @param  {string}  countryCode\n * @param  {string}  stateCode\n * @return {boolean} Whether country and state added result in a tax or not\n */\nSalesTax.prototype.__hasTotalSalesTax = function(\n  countryCode, stateCode\n) {\n  countryCode = (countryCode || \"\").toUpperCase();\n  stateCode = (stateCode || \"\").toUpperCase();\n\n  var taxRates = (this.__readCurrentTaxRates(countryCode) || {});\n\n  var countryTax = (taxRates.rate || 0.00);\n  var stateTax = 0.0;\n\n  if (stateCode) {\n    stateTax = (((taxRates.states || {})[stateCode] || {}).rate || 0.00);\n  }\n\n  return (\n    ((countryTax + stateTax) > 0) ? true : false\n  );\n};\n\n\n/**\n * SalesTax.prototype.__getCurrentDate\n * @private\n * @return {object} Current date\n */\nSalesTax.prototype.__getCurrentDate = function() {\n  // Return current date\n  // Notice: this function is useless as-is, though it comes handy when \\\n  //   unit-testing the library, as it lets us override current date with \\\n  //   an hardcoded date, eg. to test the automated sales tax change feature.\n  return (new Date());\n};\n\n\nmodule.exports = new SalesTax();\n"]},"metadata":{},"sourceType":"script"}