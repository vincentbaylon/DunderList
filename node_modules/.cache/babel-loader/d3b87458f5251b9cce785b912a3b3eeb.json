{"ast":null,"code":"var jsvat = function () {\n  'use strict';\n\n  function Result(vat, isValid, country) {\n    this.value = vat || null;\n    this.isValid = !!isValid;\n\n    if (country) {\n      this.country = {\n        name: country.name,\n        isoCode: {\n          short: country.codes[0],\n          long: country.codes[1],\n          numeric: country.codes[2]\n        }\n      };\n    }\n  }\n\n  function removeExtraChars(vat) {\n    vat = vat || '';\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n  }\n\n  function isValEqToCode(val, codes) {\n    return val === codes[0] || val === codes[1] || val === codes[2];\n  }\n\n  function isInList(list, country) {\n    if (!list) return false;\n\n    for (var i = 0; i < list.length; i++) {\n      var val = list[i].toUpperCase();\n      if (val === country.name.toUpperCase()) return true;\n      if (isValEqToCode(val, country.codes)) return true;\n    }\n\n    return false;\n  }\n\n  function isBlocked(country, blocked, allowed) {\n    var isBlocked = isInList(blocked, country);\n    if (isBlocked) return true;\n    var isAllowed = isInList(allowed, country);\n    return allowed.length > 0 && !isAllowed;\n  }\n\n  function getCountry(vat, countries) {\n    for (var k in countries) {\n      if (countries.hasOwnProperty(k)) {\n        var regexpValidRes = isVatValidToRegexp(vat, countries[k].rules.regex);\n        if (regexpValidRes.isValid) return countries[k];\n      }\n    }\n\n    return null;\n  }\n\n  function isVatValidToRegexp(vat, regexArr) {\n    for (var i = 0; i < regexArr.length; i++) {\n      var regex = regexArr[i];\n      var isValid = regex.test(vat);\n      if (isValid) return {\n        isValid: true,\n        regex: regex\n      };\n    }\n\n    return {\n      isValid: false\n    };\n  }\n\n  function isVatMathValid(vat, country) {\n    return country.calcFn(vat);\n  }\n\n  function isVatValid(vat, country) {\n    var regexpValidRes = isVatValidToRegexp(vat, country.rules.regex);\n    if (!regexpValidRes.isValid) return false;\n    return isVatMathValid(regexpValidRes.regex.exec(vat)[2], country);\n  }\n\n  var exports = {\n    blocked: [],\n    allowed: [],\n    countries: {},\n    checkVAT: function (vat) {\n      if (!vat) throw new Error('VAT should be specified');\n      var cleanVAT = removeExtraChars(vat);\n      var result = new Result(cleanVAT);\n      var country = getCountry(cleanVAT, this.countries);\n      if (!country) return result;\n      if (isBlocked(country, this.blocked, this.allowed)) return new Result(cleanVAT, false, country);\n      var isValid = isVatValid(cleanVAT, country);\n      if (isValid) return new Result(cleanVAT, isValid, country);\n      return result;\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.austria = {\n    name: 'Austria',\n    codes: ['AT', 'AUT', '040'],\n    calcFn: function (vat) {\n      var total = 0;\n      var temp;\n\n      for (var i = 0; i < 7; i++) {\n        temp = vat.charAt(i) * this.rules.multipliers[i];\n\n        if (temp > 9) {\n          total += Math.floor(temp / 10) + temp % 10;\n        } else {\n          total += temp;\n        }\n      }\n\n      total = 10 - (total + 4) % 10;\n      if (total === 10) total = 0;\n      return total === +vat.slice(7, 8);\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1],\n      regex: [/^(AT)U(\\d{8})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.belgium = {\n    name: 'Belgium',\n    codes: ['BE', 'BEL', '056'],\n    calcFn: function (vat) {\n      if (vat.length === 9) {\n        vat = '0' + vat;\n      }\n\n      if (+vat.slice(1, 2) === 0) return false;\n      var check = 97 - +vat.slice(0, 8) % 97;\n      return check === +vat.slice(8, 10);\n    },\n    rules: {\n      regex: [/^(BE)(0?\\d{9})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.bulgaria = {\n    name: 'Bulgaria',\n    codes: ['BG', 'BGR', '100'],\n    calcFn: function (vat) {\n      function _increase(value, vat, from, to, incr) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * (i + incr);\n        }\n\n        return value;\n      }\n\n      function _increase2(value, vat, from, to, multipliers) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * multipliers[i];\n        }\n\n        return value;\n      }\n\n      function _checkNineLengthVat(vat) {\n        var total;\n        var temp = 0;\n        var expect = +vat.slice(8);\n        temp = _increase(temp, vat, 0, 8, 1);\n        total = temp % 11;\n\n        if (total !== 10) {\n          return total === expect;\n        }\n\n        temp = _increase(0, vat, 0, 8, 3);\n        total = temp % 11;\n        if (total === 10) total = 0;\n        return total === expect;\n      }\n\n      function _isPhysicalPerson(vat, rules) {\n        // 10 digit VAT code - see if it relates to a standard physical person\n        if (/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/.test(vat)) {\n          // Check month\n          var month = +vat.slice(2, 4);\n\n          if (month > 0 && month < 13 || month > 20 && month < 33 || month > 40 && month < 53) {\n            var total = _increase2(0, vat, 0, 9, rules.multipliers.physical); // Establish check digit.\n\n\n            total = total % 11;\n            if (total === 10) total = 0; // Check to see if the check digit given is correct, If not, try next type of person\n\n            if (total === +vat.substr(9, 1)) return true;\n          }\n        }\n\n        return false;\n      }\n\n      function _isForeigner(vat, rules) {\n        // Extract the next digit and multiply by the counter.\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.foreigner); // Check to see if the check digit given is correct, If not, try next type of person\n\n\n        if (total % 10 === +vat.substr(9, 1)) {\n          return true;\n        }\n      }\n\n      function _miscellaneousVAT(vat, rules) {\n        // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.miscellaneous); // Establish check digit.\n\n\n        total = 11 - total % 11;\n        if (total === 10) return false;\n        if (total === 11) total = 0; // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n\n        var expect = +vat.substr(9, 1);\n        return total === expect;\n      }\n\n      if (vat.length === 9) {\n        return _checkNineLengthVat(vat);\n      } else {\n        return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules);\n      }\n    },\n    rules: {\n      multipliers: {\n        physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n        foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n        miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n      },\n      regex: [/^(BG)(\\d{9,10})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.croatia = {\n    name: 'Croatia',\n    codes: ['HR', 'HRV', '191'],\n    calcFn: function (vat) {\n      var expect; // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10;\n      var sum = 0;\n\n      for (var i = 0; i < 10; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10;\n\n        if (sum === 0) {\n          sum = 10;\n        }\n\n        product = 2 * sum % 11;\n      } // Now check that we have the right check digit\n\n\n      expect = +vat.slice(10, 11);\n      return (product + expect) % 10 === 1;\n    },\n    rules: {\n      regex: [/^(HR)(\\d{11})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.cyprus = {\n    name: 'Cyprus',\n    codes: ['CY', 'CYP', '196'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Not allowed to start with '12'\n\n      if (+vat.slice(0, 2) === 12) return false; // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        var temp = +vat.charAt(i);\n\n        if (i % 2 === 0) {\n          switch (temp) {\n            case 0:\n              temp = 1;\n              break;\n\n            case 1:\n              temp = 0;\n              break;\n\n            case 2:\n              temp = 5;\n              break;\n\n            case 3:\n              temp = 7;\n              break;\n\n            case 4:\n              temp = 9;\n              break;\n\n            default:\n              temp = temp * 2 + 3;\n          }\n        }\n\n        total += temp;\n      } // Establish check digit using modulus 26, and translate to char. equivalent.\n\n\n      total = total % 26;\n      total = String.fromCharCode(total + 65); // Check to see if the check digit given is correct\n\n      expect = vat.substr(8, 1);\n      return total === expect;\n    },\n    rules: {\n      regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.czech_republic = {\n    name: 'Czech Republic',\n    codes: ['CZ', 'CZE', '203'],\n    calcFn: function (vat) {\n      function _isLegalEntities(vat, rules) {\n        var total = 0;\n\n        if (rules.additional[0].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var i = 0; i < 7; i++) {\n            total += +vat.charAt(i) * rules.multipliers[i];\n          } // Establish check digit.\n\n\n          total = 11 - total % 11;\n          if (total === 10) total = 0;\n          if (total === 11) total = 1; // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n          var expect = +vat.slice(7, 8);\n          return total === expect;\n        }\n\n        return false;\n      }\n\n      function _isIndividualType2(vat, rules) {\n        var total = 0;\n\n        if (rules.additional[2].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var j = 0; j < 7; j++) {\n            total += +vat.charAt(j + 1) * rules.multipliers[j];\n          } // Establish check digit.\n\n\n          total = 11 - total % 11;\n          if (total === 10) total = 0;\n          if (total === 11) total = 1; // Convert calculated check digit according to a lookup table\n\n          var expect = +vat.slice(8, 9);\n          return rules.lookup[total - 1] === expect;\n        }\n\n        return false;\n      }\n\n      function _isIndividualType3(vat, rules) {\n        if (rules.additional[3].test(vat)) {\n          var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8);\n          var expect = +vat % 11 === 0;\n          return !!(temp % 11 === 0 && expect);\n        }\n\n        return false;\n      }\n\n      if (_isLegalEntities(vat, this.rules)) return true;\n      if (_isIndividualType2(vat, this.rules)) return true;\n      if (_isIndividualType3(vat, this.rules)) return true;\n      return false;\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n      regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n      additional: [/^\\d{8}$/, /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/, /^6\\d{8}$/, /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.denmark = {\n    name: 'Denmark',\n    codes: ['DK', 'DNK', '208'],\n    calcFn: function (vat) {\n      var total = 0;\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      return total % 11 === 0;\n    },\n    rules: {\n      multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n      regex: [/^(DK)(\\d{8})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.estonia = {\n    name: 'Estonia',\n    codes: ['EE', 'EST', '233'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Establish check digits using modulus 10.\n\n\n      total = 10 - total % 10;\n      if (total === 10) total = 0; // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n      regex: [/^(EE)(10\\d{7})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.europe = {\n    name: 'Europe',\n    codes: ['EU', 'EUR', '000'],\n    // TODO (S.Panfilov) that's not a real codes\n    calcFn: function () {\n      // We know little about EU numbers apart from the fact that the first 3 digits represent the\n      // country, and that there are nine digits in total.\n      return true;\n    },\n    rules: {\n      regex: [/^(EU)(\\d{9})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.finland = {\n    name: 'Finland',\n    codes: ['FI', 'FIN', '246'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i]; // Establish check digit.\n\n\n      total = 11 - total % 11;\n\n      if (total > 9) {\n        total = 0;\n      } // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n\n      expect = +vat.slice(7, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [7, 9, 10, 5, 8, 4, 2],\n      regex: [/^(FI)(\\d{8})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.france = {\n    name: 'France',\n    codes: ['FR', 'FRA', '250'],\n    calcFn: function (vat) {\n      var total;\n      var expect; // Checks the check digits of a French VAT number.\n\n      if (!/^\\d{11}$/.test(vat)) {\n        return true;\n      } // Extract the last nine digits as an integer.\n\n\n      total = +vat.substring(2); // Establish check digit.\n\n      total = (total * 100 + 12) % 97; // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n      expect = +vat.slice(0, 2);\n      return total === expect;\n    },\n    rules: {\n      regex: [/^(FR)(\\d{11})$/, /^(FR)([A-HJ-NP-Z]\\d{10})$/, /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/, /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.germany = {\n    name: 'Germany',\n    codes: ['DE', 'DEU', '276'],\n    calcFn: function (vat) {\n      // Checks the check digits of a German VAT number.\n      var product = 10;\n      var sum = 0;\n      var checkDigit = 0;\n      var expect;\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement peculiar algorithm!.\n        sum = (+vat.charAt(i) + product) % 10;\n\n        if (sum === 0) {\n          sum = 10;\n        }\n\n        product = 2 * sum % 11;\n      } // Establish check digit.\n\n\n      if (11 - product === 10) {\n        checkDigit = 0;\n      } else {\n        checkDigit = 11 - product;\n      } // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n      // check digit.\n\n\n      expect = +vat.slice(8, 9);\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: [/^(DE)([1-9]\\d{8})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.greece = {\n    name: 'Greece',\n    codes: ['GR', 'GRC', '300'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // eight character numbers should be prefixed with an 0.\n\n      if (vat.length === 8) {\n        vat = '0' + vat;\n      } // Extract the next digit and multiply by the counter.\n\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Establish check digit.\n\n\n      total = total % 11;\n\n      if (total > 9) {\n        total = 0;\n      } // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [256, 128, 64, 32, 16, 8, 4, 2],\n      regex: [/^(EL)(\\d{9})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.hungary = {\n    name: 'Hungary',\n    codes: ['HU', 'HUN', '348'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Establish check digit.\n\n\n      total = 10 - total % 10;\n      if (total === 10) total = 0; // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n      expect = +vat.slice(7, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [9, 7, 3, 1, 9, 7, 3],\n      regex: [/^(HU)(\\d{8})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.ireland = {\n    name: 'Ireland',\n    codes: ['IE', 'IRL', '372'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // If the code is type 1 format, we need to convert it to the new before performing the validation.\n\n      if (this.rules.typeFormats.first.test(vat)) {\n        vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n      } // Extract the next digit and multiply by the counter.\n\n\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // If the number is type 3 then we need to include the trailing A or H in the calculation\n\n\n      if (this.rules.typeFormats.third.test(vat)) {\n        // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n        if (vat.charAt(8) === 'H') {\n          total += 72;\n        } else {\n          total += 9;\n        }\n      } // Establish check digit using modulus 23, and translate to char. equivalent.\n\n\n      total = total % 23;\n\n      if (total === 0) {\n        total = 'W';\n      } else {\n        total = String.fromCharCode(total + 64);\n      } // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n\n\n      expect = vat.slice(7, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      typeFormats: {\n        first: /^\\d[A-Z*+]/,\n        third: /^\\d{7}[A-Z][AH]$/\n      },\n      regex: [/^(IE)(\\d{7}[A-W])$/, /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/, /^(IE)(\\d{7}[A-W][AH])$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.italy = {\n    name: 'Italy',\n    codes: ['IT', 'ITA', '380'],\n    calcFn: function (vat) {\n      var total = 0;\n      var temp;\n      var expect; // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n\n      if (+vat.slice(0, 7) === 0) {\n        return false;\n      }\n\n      temp = +vat.slice(7, 10);\n\n      if (temp < 1 || temp > 201 && temp !== 999 && temp !== 888) {\n        return false;\n      } // Extract the next digit and multiply by the appropriate\n\n\n      for (var i = 0; i < 10; i++) {\n        temp = +vat.charAt(i) * this.rules.multipliers[i];\n        if (temp > 9) total += Math.floor(temp / 10) + temp % 10;else total += temp;\n      } // Establish check digit.\n\n\n      total = 10 - total % 10;\n\n      if (total > 9) {\n        total = 0;\n      } // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n\n      expect = +vat.slice(10, 11);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n      regex: [/^(IT)(\\d{11})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.latvia = {\n    name: 'Latvia',\n    codes: ['LV', 'LVA', '428'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Differentiate between legal entities and natural bodies. For the latter we simply check that\n      // the first six digits correspond to valid DDMMYY dates.\n\n      if (/^[0-3]/.test(vat)) {\n        return !!/^[0-3][0-9][0-1][0-9]/.test(vat);\n      } else {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        } // Establish check digits by getting modulus 11.\n\n\n        if (total % 11 === 4 && vat[0] === 9) total = total - 45;\n\n        if (total % 11 === 4) {\n          total = 4 - total % 11;\n        } else if (total % 11 > 4) {\n          total = 14 - total % 11;\n        } else if (total % 11 < 4) {\n          total = 3 - total % 11;\n        } // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n\n        expect = +vat.slice(10, 11);\n        return total === expect;\n      }\n    },\n    rules: {\n      multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n      regex: [/^(LV)(\\d{11})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.lithuania = {\n    name: 'Lithuania',\n    codes: ['LT', 'LTU', '440'],\n    calcFn: function (vat) {\n      function _extractDigit(vat, multiplier, key) {\n        return +vat.charAt(key) * multiplier[key];\n      }\n\n      function _doubleCheckCalculation(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0;\n\n          for (var i = 0; i < 8; i++) {\n            total += _extractDigit(vat, rules.multipliers.short, i);\n          }\n        }\n\n        return total;\n      }\n\n      function extractDigit(vat, total) {\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * (i + 1);\n        }\n\n        return total;\n      }\n\n      function checkDigit(total) {\n        total = total % 11;\n\n        if (total === 10) {\n          total = 0;\n        }\n\n        return total;\n      }\n\n      function _check9DigitVat(vat, rules) {\n        // 9 character VAT numbers are for legal persons\n        var total = 0;\n\n        if (vat.length === 9) {\n          // 8th character must be one\n          if (!/^\\d{7}1/.test(vat)) return false; // Extract the next digit and multiply by the counter+1.\n\n          total = extractDigit(vat, total); // Can have a double check digit calculation!\n\n          total = _doubleCheckCalculation(vat, total, rules); // Establish check digit.\n\n          total = checkDigit(total); // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n          var expect = +vat.slice(8, 9);\n          return total === expect;\n        }\n\n        return false;\n      }\n\n      function extractDigit12(vat, total, rules) {\n        for (var k = 0; k < 11; k++) {\n          total += _extractDigit(vat, rules.multipliers.med, k);\n        }\n\n        return total;\n      }\n\n      function _doubleCheckCalculation12(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0;\n\n          for (var l = 0; l < 11; l++) {\n            total += _extractDigit(vat, rules.multipliers.alt, l);\n          }\n        }\n\n        return total;\n      }\n\n      function _check12DigitVat(vat, rules) {\n        var total = 0; // 12 character VAT numbers are for temporarily registered taxpayers\n\n        if (vat.length === 12) {\n          // 11th character must be one\n          if (!rules.check.test(vat)) return false; // Extract the next digit and multiply by the counter+1.\n\n          total = extractDigit12(vat, total, rules); // Can have a double check digit calculation!\n\n          total = _doubleCheckCalculation12(vat, total, rules); // Establish check digit.\n\n          total = checkDigit(total); // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n          var expect = +vat.slice(11, 12);\n          return total === expect;\n        }\n\n        return false;\n      }\n\n      return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules);\n    },\n    rules: {\n      multipliers: {\n        short: [3, 4, 5, 6, 7, 8, 9, 1],\n        med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n        alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n      },\n      check: /^\\d{10}1/,\n      regex: [/^(LT)(\\d{9}|\\d{12})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.luxembourg = {\n    name: 'Luxembourg',\n    codes: ['LU', 'LUX', '442'],\n    calcFn: function (vat) {\n      var expect = +vat.slice(6, 8);\n      var checkDigit = +vat.slice(0, 6) % 89; // Checks the check digits of a Luxembourg VAT number.\n\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: [/^(LU)(\\d{8})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.malta = {\n    name: 'Malta',\n    codes: ['MT', 'MLT', '470'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 6; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Establish check digits by getting modulus 37.\n\n\n      total = 37 - total % 37; // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n      expect = +vat.slice(6, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [3, 4, 6, 7, 8, 9],\n      regex: [/^(MT)([1-9]\\d{7})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.netherlands = {\n    name: 'Netherlands',\n    codes: ['NL', 'NLD', '528'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Establish check digits by getting modulus 11.\n\n\n      total = total % 11;\n\n      if (total > 9) {\n        total = 0;\n      } // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NL)(\\d{9})B\\d{2}$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.norway = {\n    name: 'Norway',\n    codes: ['NO', 'NOR', '578'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // See http://www.brreg.no/english/coordination/number.html\n      // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n\n\n      total = 11 - total % 11;\n\n      if (total === 11) {\n        total = 0;\n      }\n\n      if (total < 10) {\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      }\n    },\n    rules: {\n      multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NO)(\\d{9})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.poland = {\n    name: 'Poland',\n    codes: ['PL', 'POL', '616'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Establish check digits subtracting modulus 11 from 11.\n\n\n      total = total % 11;\n\n      if (total > 9) {\n        total = 0;\n      } // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n\n      expect = +vat.slice(9, 10);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n      regex: [/^(PL)(\\d{10})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.portugal = {\n    name: 'Portugal',\n    codes: ['PT', 'PRT', '620'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Establish check digits subtracting modulus 11 from 11.\n\n\n      total = 11 - total % 11;\n\n      if (total > 9) {\n        total = 0;\n      } // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(PT)(\\d{9})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.romania = {\n    name: 'Romania',\n    codes: ['RO', 'ROU', '642'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Extract the next digit and multiply by the counter.\n\n      var vatLength = vat.length;\n      var multipliers = this.rules.multipliers.slice(10 - vatLength);\n\n      for (var i = 0; i < vat.length - 1; i++) {\n        total += +vat.charAt(i) * multipliers[i];\n      } // Establish check digits by getting modulus 11.\n\n\n      total = 10 * total % 11;\n      if (total === 10) total = 0; // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n      expect = +vat.slice(vat.length - 1, vat.length);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n      regex: [/^(RO)([1-9]\\d{1,9})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.russia = {\n    name: 'Russian Federation',\n    codes: ['RU', 'RUS', '643'],\n    calcFn: function (vat) {\n      function _check10DigitINN(vat, rules) {\n        var total = 0;\n\n        if (vat.length === 10) {\n          for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * rules.multipliers.m_1[i];\n          }\n\n          total = total % 11;\n\n          if (total > 9) {\n            total = total % 10;\n          } // Compare it with the last character of the VAT number. If it is the same, then it's valid\n\n\n          var expect = +vat.slice(9, 10);\n          return total === expect;\n        }\n\n        return false;\n      }\n\n      function _check12DigitINN(vat, rules) {\n        var total1 = 0;\n        var total2 = 0;\n\n        if (vat.length === 12) {\n          for (var j = 0; j < 11; j++) {\n            total1 += +vat.charAt(j) * rules.multipliers.m_2[j];\n          }\n\n          total1 = total1 % 11;\n\n          if (total1 > 9) {\n            total1 = total1 % 10;\n          }\n\n          for (var k = 0; k < 11; k++) {\n            total2 += +vat.charAt(k) * rules.multipliers.m_3[k];\n          }\n\n          total2 = total2 % 11;\n\n          if (total2 > 9) {\n            total2 = total2 % 10;\n          } // Compare the first check with the 11th character and the second check with the 12th and last\n          // character of the VAT number. If they're both the same, then it's valid\n\n\n          var expect = total1 === +vat.slice(10, 11);\n          var expect2 = total2 === +vat.slice(11, 12);\n          return expect && expect2;\n        }\n\n        return false;\n      } // See http://russianpartner.biz/test_inn.html for algorithm\n\n\n      return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules);\n    },\n    rules: {\n      multipliers: {\n        m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n      },\n      regex: [/^(RU)(\\d{10}|\\d{12})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.serbia = {\n    name: 'Serbia',\n    codes: ['RS', 'SRB', '688'],\n    calcFn: function (vat) {\n      // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n      var product = 10;\n      var sum = 0;\n      var checkDigit;\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10;\n\n        if (sum === 0) {\n          sum = 10;\n        }\n\n        product = 2 * sum % 11;\n      } // Now check that we have the right check digit\n\n\n      var expect = 1;\n      checkDigit = (product + +vat.slice(8, 9)) % 10;\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: [/^(RS)(\\d{9})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.slovakia_republic = {\n    name: 'Slovakia_',\n    codes: ['SK', 'SVK', '703'],\n    calcFn: function (vat) {\n      var expect = 0;\n      var checkDigit = vat % 11;\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.slovenia = {\n    name: 'Slovenia',\n    codes: ['SI', 'SVN', '705'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Establish check digits using modulus 11\n\n\n      total = 11 - total % 11;\n\n      if (total === 10) {\n        total = 0;\n      } // Compare the number with the last character of the VAT number. If it is the\n      // same, then it's a valid check digit.\n\n\n      expect = +vat.slice(7, 8);\n      return !!(total !== 11 && total === expect);\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(SI)([1-9]\\d{7})$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.spain = {\n    name: 'Spain',\n    codes: ['ES', 'ESP', '724'],\n    calcFn: function (vat) {\n      var i = 0;\n      var total = 0;\n      var temp;\n      var expect; // National juridical entities\n\n      if (this.rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i];\n          if (temp > 9) total += Math.floor(temp / 10) + temp % 10;else total += temp;\n        } // Now calculate the check digit itself.\n\n\n        total = 10 - total % 10;\n\n        if (total === 10) {\n          total = 0;\n        } // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      } // Juridical entities other than national ones\n      else if (this.rules.additional[1].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i];\n          if (temp > 9) total += Math.floor(temp / 10) + temp % 10;else total += temp;\n        } // Now calculate the check digit itself.\n\n\n        total = 10 - total % 10;\n        total = String.fromCharCode(total + 64); // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n        expect = vat.slice(8, 9);\n        return total === expect;\n      } // Personal number (NIF) (starting with numeric of Y or Z)\n      else if (this.rules.additional[2].test(vat)) {\n        var tempnumber = vat;\n        if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1');\n        if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2');\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23);\n        return tempnumber.charAt(8) === expect;\n      } // Personal number (NIF) (starting with K, L, M, or X)\n      else if (this.rules.additional[3].test(vat)) {\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23);\n        return vat.charAt(8) === expect;\n      } else return false;\n    },\n    rules: {\n      multipliers: [2, 1, 2, 1, 2, 1, 2],\n      regex: [/^(ES)([A-Z]\\d{8})$/, /^(ES)([A-HN-SW]\\d{7}[A-J])$/, /^(ES)([0-9YZ]\\d{7}[A-Z])$/, /^(ES)([KLMX]\\d{7}[A-Z])$/],\n      additional: [/^[A-H|J|U|V]\\d{8}$/, /^[A-H|N-S|W]\\d{7}[A-J]$/, /^[0-9|Y|Z]\\d{7}[A-Z]$/, /^[K|L|M|X]\\d{7}[A-Z]$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.sweden = {\n    name: 'Sweden',\n    codes: ['SE', 'SWE', '752'],\n    calcFn: function (vat) {\n      var expect; // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n\n      var R = 0;\n      var digit;\n\n      for (var i = 0; i < 9; i = i + 2) {\n        digit = +vat.charAt(i);\n        R += Math.floor(digit / 5) + digit * 2 % 10;\n      } // Calculate S where S = C2 + C4 + C6 + C8\n\n\n      var S = 0;\n\n      for (var j = 1; j < 9; j = j + 2) {\n        S += +vat.charAt(j);\n      }\n\n      var checkDigit = (10 - (R + S) % 10) % 10; // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n\n      expect = +vat.slice(9, 10);\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: [/^(SE)(\\d{10}01)$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.switzerland = {\n    name: 'Switzerland',\n    codes: ['CH', 'CHE', '756'],\n    calcFn: function (vat) {\n      var total = 0;\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Establish check digit.\n\n\n      total = 11 - total % 11;\n      if (total === 10) return false;\n      if (total === 11) total = 0; // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n\n      var expect = +vat.substr(8, 1);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n      regex: [/^(CHE)(\\d{9})(MWST)?$/]\n    }\n  }; // eslint-disable-next-line no-undef\n\n  exports.countries.united_kingdom = {\n    name: 'United Kingdom',\n    codes: ['GB', 'GBR', '826'],\n    calcFn: function (vat) {\n      var total = 0;\n      var expect; // Government departments\n\n      if (vat.substr(0, 2) === 'GD') {\n        expect = 500;\n        return vat.substr(2, 3) < expect;\n      } // Health authorities\n\n\n      if (vat.substr(0, 2) === 'HA') {\n        expect = 499;\n        return vat.substr(2, 3) > expect;\n      } // Standard and commercial numbers\n      // 0 VAT numbers disallowed!\n\n\n      if (+vat.slice(0) === 0) return false; // Check range is OK for modulus 97 calculation\n\n      var no = +vat.slice(0, 7); // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      } // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n      // VAT number could use either system, so we check it against both.\n      // Establish check digits by subtracting 97 from total until negative.\n\n\n      var checkDigit = total;\n\n      while (checkDigit > 0) {\n        checkDigit = checkDigit - 97;\n      } // Get the absolute value and compare it with the last two characters of the VAT number. If the\n      // same, then it is a valid traditional check digit. However, even then the number must fit within\n      // certain specified ranges.\n\n\n      checkDigit = Math.abs(checkDigit);\n      if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true; // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n\n      if (checkDigit >= 55) checkDigit = checkDigit - 55;else checkDigit = checkDigit + 42;\n      expect = +vat.slice(7, 9);\n      return !!(checkDigit === expect && no > 1000000);\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(GB)?(\\d{9})$/, /^(GB)?(\\d{12})$/, /^(GB)?(GD\\d{3})$/, /^(GB)?(HA\\d{3})$/]\n    }\n  }; //Support of node.js\n\n  if (typeof module === 'object' && module.exports) module.exports = exports;\n  return exports;\n}();","map":{"version":3,"sources":["/Users/vinceboogie/Development/DunderList/node_modules/jsvat/dist/jsvat.js"],"names":["jsvat","Result","vat","isValid","country","value","name","isoCode","short","codes","long","numeric","removeExtraChars","toString","toUpperCase","replace","isValEqToCode","val","isInList","list","i","length","isBlocked","blocked","allowed","isAllowed","getCountry","countries","k","hasOwnProperty","regexpValidRes","isVatValidToRegexp","rules","regex","regexArr","test","isVatMathValid","calcFn","isVatValid","exec","exports","checkVAT","Error","cleanVAT","result","austria","total","temp","charAt","multipliers","Math","floor","slice","belgium","check","bulgaria","_increase","from","to","incr","_increase2","_checkNineLengthVat","expect","_isPhysicalPerson","month","physical","substr","_isForeigner","foreigner","_miscellaneousVAT","miscellaneous","croatia","product","sum","cyprus","String","fromCharCode","czech_republic","_isLegalEntities","additional","_isIndividualType2","j","lookup","_isIndividualType3","denmark","estonia","europe","finland","france","substring","germany","checkDigit","greece","hungary","ireland","typeFormats","first","third","italy","latvia","lithuania","_extractDigit","multiplier","key","_doubleCheckCalculation","extractDigit","_check9DigitVat","extractDigit12","med","_doubleCheckCalculation12","l","alt","_check12DigitVat","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","_check10DigitINN","m_1","_check12DigitINN","total1","total2","m_2","m_3","expect2","serbia","slovakia_republic","slovenia","spain","tempnumber","sweden","R","digit","S","switzerland","united_kingdom","no","abs","module"],"mappings":"AAAA,IAAIA,KAAK,GAAI,YAAW;AAEtB;;AAEA,WAASC,MAAT,CAAgBC,GAAhB,EAAqBC,OAArB,EAA8BC,OAA9B,EAAuC;AACrC,SAAKC,KAAL,GAAaH,GAAG,IAAI,IAApB;AACA,SAAKC,OAAL,GAAe,CAAC,CAACA,OAAjB;;AAEA,QAAIC,OAAJ,EAAa;AACX,WAAKA,OAAL,GAAe;AACbE,QAAAA,IAAI,EAAEF,OAAO,CAACE,IADD;AAEbC,QAAAA,OAAO,EAAE;AACPC,UAAAA,KAAK,EAAEJ,OAAO,CAACK,KAAR,CAAc,CAAd,CADA;AAEPC,UAAAA,IAAI,EAAEN,OAAO,CAACK,KAAR,CAAc,CAAd,CAFC;AAGPE,UAAAA,OAAO,EAAEP,OAAO,CAACK,KAAR,CAAc,CAAd;AAHF;AAFI,OAAf;AAQD;AACF;;AAED,WAASG,gBAAT,CAA0BV,GAA1B,EAA+B;AAC7BA,IAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACA,WAAOA,GAAG,CAACW,QAAJ,GAAeC,WAAf,GAA6BC,OAA7B,CAAqC,aAArC,EAAoD,EAApD,CAAP;AACD;;AAED,WAASC,aAAT,CAAuBC,GAAvB,EAA4BR,KAA5B,EAAmC;AACjC,WAAQQ,GAAG,KAAKR,KAAK,CAAC,CAAD,CAAb,IAAoBQ,GAAG,KAAKR,KAAK,CAAC,CAAD,CAAjC,IAAwCQ,GAAG,KAAKR,KAAK,CAAC,CAAD,CAA7D;AACD;;AAED,WAASS,QAAT,CAAkBC,IAAlB,EAAwBf,OAAxB,EAAiC;AAC/B,QAAI,CAACe,IAAL,EAAW,OAAO,KAAP;;AAEX,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAIH,GAAG,GAAGE,IAAI,CAACC,CAAD,CAAJ,CAAQN,WAAR,EAAV;AACA,UAAIG,GAAG,KAAKb,OAAO,CAACE,IAAR,CAAaQ,WAAb,EAAZ,EAAwC,OAAO,IAAP;AACxC,UAAIE,aAAa,CAACC,GAAD,EAAMb,OAAO,CAACK,KAAd,CAAjB,EAAuC,OAAO,IAAP;AACxC;;AAED,WAAO,KAAP;AACD;;AAED,WAASa,SAAT,CAAmBlB,OAAnB,EAA4BmB,OAA5B,EAAqCC,OAArC,EAA8C;AAC5C,QAAIF,SAAS,GAAGJ,QAAQ,CAACK,OAAD,EAAUnB,OAAV,CAAxB;AACA,QAAIkB,SAAJ,EAAe,OAAO,IAAP;AACf,QAAIG,SAAS,GAAGP,QAAQ,CAACM,OAAD,EAAUpB,OAAV,CAAxB;AACA,WAAOoB,OAAO,CAACH,MAAR,GAAiB,CAAjB,IAAsB,CAACI,SAA9B;AACD;;AAED,WAASC,UAAT,CAAoBxB,GAApB,EAAyByB,SAAzB,EAAoC;AAClC,SAAK,IAAIC,CAAT,IAAcD,SAAd,EAAyB;AACvB,UAAIA,SAAS,CAACE,cAAV,CAAyBD,CAAzB,CAAJ,EAAiC;AAC/B,YAAIE,cAAc,GAAGC,kBAAkB,CAAC7B,GAAD,EAAMyB,SAAS,CAACC,CAAD,CAAT,CAAaI,KAAb,CAAmBC,KAAzB,CAAvC;AACA,YAAIH,cAAc,CAAC3B,OAAnB,EAA4B,OAAOwB,SAAS,CAACC,CAAD,CAAhB;AAC7B;AACF;;AAED,WAAO,IAAP;AACD;;AAED,WAASG,kBAAT,CAA4B7B,GAA5B,EAAiCgC,QAAjC,EAA2C;AACzC,SAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,QAAQ,CAACb,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAIa,KAAK,GAAGC,QAAQ,CAACd,CAAD,CAApB;AACA,UAAIjB,OAAO,GAAG8B,KAAK,CAACE,IAAN,CAAWjC,GAAX,CAAd;AACA,UAAIC,OAAJ,EAAa,OAAO;AAClBA,QAAAA,OAAO,EAAE,IADS;AAElB8B,QAAAA,KAAK,EAAEA;AAFW,OAAP;AAId;;AAED,WAAO;AACL9B,MAAAA,OAAO,EAAE;AADJ,KAAP;AAGD;;AAED,WAASiC,cAAT,CAAwBlC,GAAxB,EAA6BE,OAA7B,EAAsC;AACpC,WAAOA,OAAO,CAACiC,MAAR,CAAenC,GAAf,CAAP;AACD;;AAED,WAASoC,UAAT,CAAoBpC,GAApB,EAAyBE,OAAzB,EAAkC;AAChC,QAAI0B,cAAc,GAAGC,kBAAkB,CAAC7B,GAAD,EAAME,OAAO,CAAC4B,KAAR,CAAcC,KAApB,CAAvC;AACA,QAAI,CAACH,cAAc,CAAC3B,OAApB,EAA6B,OAAO,KAAP;AAC7B,WAAOiC,cAAc,CAACN,cAAc,CAACG,KAAf,CAAqBM,IAArB,CAA0BrC,GAA1B,EAA+B,CAA/B,CAAD,EAAoCE,OAApC,CAArB;AACD;;AAED,MAAIoC,OAAO,GAAG;AACZjB,IAAAA,OAAO,EAAE,EADG;AAEZC,IAAAA,OAAO,EAAE,EAFG;AAGZG,IAAAA,SAAS,EAAE,EAHC;AAIZc,IAAAA,QAAQ,EAAE,UAASvC,GAAT,EAAc;AACtB,UAAI,CAACA,GAAL,EAAU,MAAM,IAAIwC,KAAJ,CAAU,yBAAV,CAAN;AACV,UAAIC,QAAQ,GAAG/B,gBAAgB,CAACV,GAAD,CAA/B;AACA,UAAI0C,MAAM,GAAG,IAAI3C,MAAJ,CAAW0C,QAAX,CAAb;AAEA,UAAIvC,OAAO,GAAGsB,UAAU,CAACiB,QAAD,EAAW,KAAKhB,SAAhB,CAAxB;AACA,UAAI,CAACvB,OAAL,EAAc,OAAOwC,MAAP;AACd,UAAItB,SAAS,CAAClB,OAAD,EAAU,KAAKmB,OAAf,EAAwB,KAAKC,OAA7B,CAAb,EAAoD,OAAO,IAAIvB,MAAJ,CAAW0C,QAAX,EAAqB,KAArB,EAA4BvC,OAA5B,CAAP;AAEpD,UAAID,OAAO,GAAGmC,UAAU,CAACK,QAAD,EAAWvC,OAAX,CAAxB;AACA,UAAID,OAAJ,EAAa,OAAO,IAAIF,MAAJ,CAAW0C,QAAX,EAAqBxC,OAArB,EAA8BC,OAA9B,CAAP;AAEb,aAAOwC,MAAP;AACD;AAjBW,GAAd,CApFsB,CAyGtB;;AACAJ,EAAAA,OAAO,CAACb,SAAR,CAAkBkB,OAAlB,GAA4B;AAC1BvC,IAAAA,IAAI,EAAE,SADoB;AAE1BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFmB;AAG1B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIC,IAAJ;;AAEA,WAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B2B,QAAAA,IAAI,GAAG7C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,IAAgB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAAvB;;AAEA,YAAI2B,IAAI,GAAG,CAAX,EAAc;AACZD,UAAAA,KAAK,IAAII,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAAG,EAAlB,IAAwBA,IAAI,GAAG,EAAxC;AACD,SAFD,MAEO;AACLD,UAAAA,KAAK,IAAIC,IAAT;AACD;AACF;;AAEDD,MAAAA,KAAK,GAAG,KAAK,CAACA,KAAK,GAAG,CAAT,IAAc,EAA3B;AACA,UAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR;AAElB,aAAOA,KAAK,KAAK,CAAC5C,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAlB;AACD,KArByB;AAsB1BpB,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,gBAAD;AAFF;AAtBmB,GAA5B,CA1GsB,CAsItB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB0B,OAAlB,GAA4B;AAC1B/C,IAAAA,IAAI,EAAE,SADoB;AAE1BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFmB;AAG1B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAIA,GAAG,CAACmB,MAAJ,KAAe,CAAnB,EAAsB;AACpBnB,QAAAA,GAAG,GAAG,MAAMA,GAAZ;AACD;;AAED,UAAI,CAACA,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,KAAqB,CAAzB,EAA4B,OAAO,KAAP;AAE5B,UAAIE,KAAK,GAAI,KAAK,CAACpD,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,GAAmB,EAArC;AACA,aAAOE,KAAK,KAAK,CAACpD,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAlB;AACD,KAZyB;AAa1BpB,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CAAC,iBAAD;AADF;AAbmB,GAA5B,CAvIsB,CAyJtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB4B,QAAlB,GAA6B;AAC3BjD,IAAAA,IAAI,EAAE,UADqB;AAE3BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFoB;AAG3B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,eAASsD,SAAT,CAAmBnD,KAAnB,EAA0BH,GAA1B,EAA+BuD,IAA/B,EAAqCC,EAArC,EAAyCC,IAAzC,EAA+C;AAC7C,aAAK,IAAIvC,CAAC,GAAGqC,IAAb,EAAmBrC,CAAC,GAAGsC,EAAvB,EAA2BtC,CAAC,EAA5B,EAAgC;AAC9Bf,UAAAA,KAAK,IAAI,CAACH,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,IAAkBA,CAAC,GAAGuC,IAAtB,CAAT;AACD;;AACD,eAAOtD,KAAP;AACD;;AAED,eAASuD,UAAT,CAAoBvD,KAApB,EAA2BH,GAA3B,EAAgCuD,IAAhC,EAAsCC,EAAtC,EAA0CT,WAA1C,EAAuD;AACrD,aAAK,IAAI7B,CAAC,GAAGqC,IAAb,EAAmBrC,CAAC,GAAGsC,EAAvB,EAA2BtC,CAAC,EAA5B,EAAgC;AAC9Bf,UAAAA,KAAK,IAAI,CAACH,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB6B,WAAW,CAAC7B,CAAD,CAArC;AACD;;AACD,eAAOf,KAAP;AACD;;AAED,eAASwD,mBAAT,CAA6B3D,GAA7B,EAAkC;AAChC,YAAI4C,KAAJ;AACA,YAAIC,IAAI,GAAG,CAAX;AACA,YAAIe,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,CAAd;AAEAL,QAAAA,IAAI,GAAGS,SAAS,CAACT,IAAD,EAAO7C,GAAP,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAhB;AAEA4C,QAAAA,KAAK,GAAGC,IAAI,GAAG,EAAf;;AACA,YAAID,KAAK,KAAK,EAAd,EAAkB;AAChB,iBAAOA,KAAK,KAAKgB,MAAjB;AACD;;AAEDf,QAAAA,IAAI,GAAGS,SAAS,CAAC,CAAD,EAAItD,GAAJ,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAhB;AAEA4C,QAAAA,KAAK,GAAGC,IAAI,GAAG,EAAf;AACA,YAAID,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR;AAElB,eAAOA,KAAK,KAAKgB,MAAjB;AACD;;AAED,eAASC,iBAAT,CAA2B7D,GAA3B,EAAgC8B,KAAhC,EAAuC;AACrC;AACA,YAAK,2BAAD,CAA8BG,IAA9B,CAAmCjC,GAAnC,CAAJ,EAA6C;AAC3C;AACA,cAAI8D,KAAK,GAAG,CAAC9D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAb;;AACA,cAAKY,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAtB,IAA8BA,KAAK,GAAG,EAAR,IAAcA,KAAK,GAAG,EAApD,IAA4DA,KAAK,GAAG,EAAR,IAAcA,KAAK,GAAG,EAAtF,EAA2F;AACzF,gBAAIlB,KAAK,GAAGc,UAAU,CAAC,CAAD,EAAI1D,GAAJ,EAAS,CAAT,EAAY,CAAZ,EAAe8B,KAAK,CAACiB,WAAN,CAAkBgB,QAAjC,CAAtB,CADyF,CAEzF;;;AACAnB,YAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACA,gBAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR,CAJuE,CAKzF;;AACA,gBAAIA,KAAK,KAAK,CAAC5C,GAAG,CAACgE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAf,EAAiC,OAAO,IAAP;AAClC;AACF;;AAED,eAAO,KAAP;AACD;;AAED,eAASC,YAAT,CAAsBjE,GAAtB,EAA2B8B,KAA3B,EAAkC;AAChC;AACA,YAAIc,KAAK,GAAGc,UAAU,CAAC,CAAD,EAAI1D,GAAJ,EAAS,CAAT,EAAY,CAAZ,EAAe8B,KAAK,CAACiB,WAAN,CAAkBmB,SAAjC,CAAtB,CAFgC,CAIhC;;;AACA,YAAItB,KAAK,GAAG,EAAR,KAAe,CAAC5C,GAAG,CAACgE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAApB,EAAsC;AACpC,iBAAO,IAAP;AACD;AACF;;AAED,eAASG,iBAAT,CAA2BnE,GAA3B,EAAgC8B,KAAhC,EAAuC;AACrC;AACA,YAAIc,KAAK,GAAGc,UAAU,CAAC,CAAD,EAAI1D,GAAJ,EAAS,CAAT,EAAY,CAAZ,EAAe8B,KAAK,CAACiB,WAAN,CAAkBqB,aAAjC,CAAtB,CAFqC,CAIrC;;;AACAxB,QAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;AACA,YAAIA,KAAK,KAAK,EAAd,EAAkB,OAAO,KAAP;AAClB,YAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR,CAPmB,CASrC;;AACA,YAAIgB,MAAM,GAAG,CAAC5D,GAAG,CAACgE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAd;AACA,eAAOpB,KAAK,KAAKgB,MAAjB;AACD;;AAED,UAAI5D,GAAG,CAACmB,MAAJ,KAAe,CAAnB,EAAsB;AACpB,eAAOwC,mBAAmB,CAAC3D,GAAD,CAA1B;AACD,OAFD,MAEO;AACL,eAAO6D,iBAAiB,CAAC7D,GAAD,EAAM,KAAK8B,KAAX,CAAjB,IAAsCmC,YAAY,CAACjE,GAAD,EAAM,KAAK8B,KAAX,CAAlD,IAAuEqC,iBAAiB,CAACnE,GAAD,EAAM,KAAK8B,KAAX,CAA/F;AACD;AACF,KArF0B;AAsF3BA,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE;AACXgB,QAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CADC;AAEXG,QAAAA,SAAS,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAFA;AAGXE,QAAAA,aAAa,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAHJ,OADR;AAMLrC,MAAAA,KAAK,EAAE,CAAC,kBAAD;AANF;AAtFoB,GAA7B,CA1JsB,CA0PtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB4C,OAAlB,GAA4B;AAC1BjE,IAAAA,IAAI,EAAE,SADoB;AAE1BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFmB;AAG1B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4D,MAAJ,CADoB,CAGpB;;AACA,UAAIU,OAAO,GAAG,EAAd;AACA,UAAIC,GAAG,GAAG,CAAV;;AAEA,WAAK,IAAIrD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B;AACAqD,QAAAA,GAAG,GAAG,CAAC,CAACvE,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiBoD,OAAlB,IAA6B,EAAnC;;AACA,YAAIC,GAAG,KAAK,CAAZ,EAAe;AACbA,UAAAA,GAAG,GAAG,EAAN;AACD;;AAEDD,QAAAA,OAAO,GAAI,IAAIC,GAAL,GAAY,EAAtB;AACD,OAfmB,CAiBpB;;;AACAX,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAV;AACA,aAAO,CAACoB,OAAO,GAAGV,MAAX,IAAqB,EAArB,KAA4B,CAAnC;AACD,KAvByB;AAwB1B9B,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CAAC,gBAAD;AADF;AAxBmB,GAA5B,CA3PsB,CAwRtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB+C,MAAlB,GAA2B;AACzBpE,IAAAA,IAAI,EAAE,QADmB;AAEzBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFkB;AAGzB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,UAAI,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,KAAqB,EAAzB,EAA6B,OAAO,KAAP,CALT,CAOpB;;AAEA,WAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAI2B,IAAI,GAAG,CAAC7C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAZ;;AACA,YAAIA,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACf,kBAAQ2B,IAAR;AACE,iBAAK,CAAL;AACEA,cAAAA,IAAI,GAAG,CAAP;AACA;;AACF,iBAAK,CAAL;AACEA,cAAAA,IAAI,GAAG,CAAP;AACA;;AACF,iBAAK,CAAL;AACEA,cAAAA,IAAI,GAAG,CAAP;AACA;;AACF,iBAAK,CAAL;AACEA,cAAAA,IAAI,GAAG,CAAP;AACA;;AACF,iBAAK,CAAL;AACEA,cAAAA,IAAI,GAAG,CAAP;AACA;;AACF;AACEA,cAAAA,IAAI,GAAGA,IAAI,GAAG,CAAP,GAAW,CAAlB;AAjBJ;AAmBD;;AACDD,QAAAA,KAAK,IAAIC,IAAT;AACD,OAjCmB,CAmCpB;;;AACAD,MAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACAA,MAAAA,KAAK,GAAG6B,MAAM,CAACC,YAAP,CAAoB9B,KAAK,GAAG,EAA5B,CAAR,CArCoB,CAuCpB;;AACAgB,MAAAA,MAAM,GAAG5D,GAAG,CAACgE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAT;AACA,aAAOpB,KAAK,KAAKgB,MAAjB;AACD,KA7CwB;AA8CzB9B,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CAAC,0BAAD;AADF;AA9CkB,GAA3B,CAzRsB,CA4UtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBkD,cAAlB,GAAmC;AACjCvE,IAAAA,IAAI,EAAE,gBAD2B;AAEjCG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAF0B;AAGjC4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,eAAS4E,gBAAT,CAA0B5E,GAA1B,EAA+B8B,KAA/B,EAAsC;AACpC,YAAIc,KAAK,GAAG,CAAZ;;AAEA,YAAId,KAAK,CAAC+C,UAAN,CAAiB,CAAjB,EAAoB5C,IAApB,CAAyBjC,GAAzB,CAAJ,EAAmC;AACjC;AACA,eAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,YAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiBY,KAAK,CAACiB,WAAN,CAAkB7B,CAAlB,CAA1B;AACD,WAJgC,CAMjC;;;AACA0B,UAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;AACA,cAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR;AAClB,cAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR,CATe,CAWjC;;AACA,cAAIgB,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAd;AACA,iBAAON,KAAK,KAAKgB,MAAjB;AACD;;AAED,eAAO,KAAP;AACD;;AAED,eAASkB,kBAAT,CAA4B9E,GAA5B,EAAiC8B,KAAjC,EAAwC;AACtC,YAAIc,KAAK,GAAG,CAAZ;;AAEA,YAAId,KAAK,CAAC+C,UAAN,CAAiB,CAAjB,EAAoB5C,IAApB,CAAyBjC,GAAzB,CAAJ,EAAmC;AACjC;AACA,eAAK,IAAI+E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BnC,YAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAWiC,CAAC,GAAG,CAAf,CAAD,GAAqBjD,KAAK,CAACiB,WAAN,CAAkBgC,CAAlB,CAA9B;AACD,WAJgC,CAMjC;;;AACAnC,UAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;AACA,cAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR;AAClB,cAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR,CATe,CAWjC;;AACA,cAAIgB,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAd;AACA,iBAAOpB,KAAK,CAACkD,MAAN,CAAapC,KAAK,GAAG,CAArB,MAA4BgB,MAAnC;AACD;;AAED,eAAO,KAAP;AACD;;AAED,eAASqB,kBAAT,CAA4BjF,GAA5B,EAAiC8B,KAAjC,EAAwC;AACtC,YAAIA,KAAK,CAAC+C,UAAN,CAAiB,CAAjB,EAAoB5C,IAApB,CAAyBjC,GAAzB,CAAJ,EAAmC;AACjC,cAAI6C,IAAI,GAAG,CAAC7C,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,GAAmBlD,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAnB,GAAqClD,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAArC,GAAuDlD,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAvD,GAAyElD,GAAG,CAACkD,KAAJ,CAAU,CAAV,CAApF;AACA,cAAIU,MAAM,GAAG,CAAC5D,GAAD,GAAO,EAAP,KAAc,CAA3B;AACA,iBAAO,CAAC,EAAE6C,IAAI,GAAG,EAAP,KAAc,CAAd,IAAmBe,MAArB,CAAR;AACD;;AAED,eAAO,KAAP;AACD;;AAED,UAAIgB,gBAAgB,CAAC5E,GAAD,EAAM,KAAK8B,KAAX,CAApB,EAAuC,OAAO,IAAP;AACvC,UAAIgD,kBAAkB,CAAC9E,GAAD,EAAM,KAAK8B,KAAX,CAAtB,EAAyC,OAAO,IAAP;AACzC,UAAImD,kBAAkB,CAACjF,GAAD,EAAM,KAAK8B,KAAX,CAAtB,EAAyC,OAAO,IAAP;AAEzC,aAAO,KAAP;AACD,KA/DgC;AAgEjCA,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CADR;AAELiC,MAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,CAFH;AAGLjD,MAAAA,KAAK,EAAE,CAAC,0BAAD,CAHF;AAIL8C,MAAAA,UAAU,EAAE,CACV,SADU,EAEV,qCAFU,EAGV,UAHU,EAIV,gCAJU;AAJP;AAhE0B,GAAnC,CA7UsB,CA0ZtB;;AACAvC,EAAAA,OAAO,CAACb,SAAR,CAAkByD,OAAlB,GAA4B;AAC1B9E,IAAAA,IAAI,EAAE,SADoB;AAE1BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFmB;AAG1B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;;AAEA,WAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD;;AAED,aAAO0B,KAAK,GAAG,EAAR,KAAe,CAAtB;AACD,KAXyB;AAY1Bd,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,eAAD;AAFF;AAZmB,GAA5B,CA3ZsB,CA6atB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB0D,OAAlB,GAA4B;AAC1B/E,IAAAA,IAAI,EAAE,SADoB;AAE1BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFmB;AAG1B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OAPmB,CASpB;;;AACA0B,MAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;AACA,UAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR,CAXE,CAapB;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KAnByB;AAoB1B9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,iBAAD;AAFF;AApBmB,GAA5B,CA9asB,CAwctB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB2D,MAAlB,GAA2B;AACzBhF,IAAAA,IAAI,EAAE,QADmB;AAEzBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFkB;AAEI;AAC7B4B,IAAAA,MAAM,EAAE,YAAW;AACjB;AACA;AACA,aAAO,IAAP;AACD,KAPwB;AAQzBL,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CAAC,eAAD;AADF;AARkB,GAA3B,CAzcsB,CAsdtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB4D,OAAlB,GAA4B;AAC1BjF,IAAAA,IAAI,EAAE,SADoB;AAE1BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFmB;AAG1B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B0B,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B,CALR,CAOpB;;;AACA0B,MAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;;AACA,UAAIA,KAAK,GAAG,CAAZ,EAAe;AACbA,QAAAA,KAAK,GAAG,CAAR;AACD,OAXmB,CAapB;;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KAnByB;AAoB1B9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,eAAD;AAFF;AApBmB,GAA5B,CAvdsB,CAiftB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB6D,MAAlB,GAA2B;AACzBlF,IAAAA,IAAI,EAAE,QADmB;AAEzBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFkB;AAGzB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAJ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,UAAI,CAAE,UAAD,CAAa3B,IAAb,CAAkBjC,GAAlB,CAAL,EAA6B;AAC3B,eAAO,IAAP;AACD,OAPmB,CASpB;;;AACA4C,MAAAA,KAAK,GAAG,CAAC5C,GAAG,CAACuF,SAAJ,CAAc,CAAd,CAAT,CAVoB,CAYpB;;AACA3C,MAAAA,KAAK,GAAG,CAACA,KAAK,GAAG,GAAR,GAAc,EAAf,IAAqB,EAA7B,CAboB,CAepB;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KArBwB;AAsBzB9B,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CACL,gBADK,EAEL,2BAFK,EAGL,4BAHK,EAIL,6BAJK;AADF;AAtBkB,GAA3B,CAlfsB,CAkhBtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB+D,OAAlB,GAA4B;AAC1BpF,IAAAA,IAAI,EAAE,SADoB;AAE1BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFmB;AAG1B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB;AACA,UAAIsE,OAAO,GAAG,EAAd;AACA,UAAIC,GAAG,GAAG,CAAV;AACA,UAAIkB,UAAU,GAAG,CAAjB;AACA,UAAI7B,MAAJ;;AAEA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B;AACAqD,QAAAA,GAAG,GAAG,CAAC,CAACvE,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiBoD,OAAlB,IAA6B,EAAnC;;AACA,YAAIC,GAAG,KAAK,CAAZ,EAAe;AACbA,UAAAA,GAAG,GAAG,EAAN;AACD;;AACDD,QAAAA,OAAO,GAAI,IAAIC,GAAL,GAAY,EAAtB;AACD,OAdmB,CAgBpB;;;AACA,UAAI,KAAKD,OAAL,KAAiB,EAArB,EAAyB;AACvBmB,QAAAA,UAAU,GAAG,CAAb;AACD,OAFD,MAEO;AACLA,QAAAA,UAAU,GAAG,KAAKnB,OAAlB;AACD,OArBmB,CAuBpB;AACA;;;AACAV,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAOuC,UAAU,KAAK7B,MAAtB;AACD,KA9ByB;AA+B1B9B,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CAAC,oBAAD;AADF;AA/BmB,GAA5B,CAnhBsB,CAujBtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBiE,MAAlB,GAA2B;AACzBtF,IAAAA,IAAI,EAAE,QADmB;AAEzBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFkB;AAGzB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,UAAI5D,GAAG,CAACmB,MAAJ,KAAe,CAAnB,EAAsB;AACpBnB,QAAAA,GAAG,GAAG,MAAMA,GAAZ;AACD,OAPmB,CASpB;;;AACA,WAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OAZmB,CAcpB;;;AACA0B,MAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;;AACA,UAAIA,KAAK,GAAG,CAAZ,EAAe;AACbA,QAAAA,KAAK,GAAG,CAAR;AACD,OAlBmB,CAoBpB;;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KA1BwB;AA2BzB9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CACX,GADW,EAEX,GAFW,EAGX,EAHW,EAIX,EAJW,EAKX,EALW,EAMX,CANW,EAOX,CAPW,EAQX,CARW,CADR;AAWLhB,MAAAA,KAAK,EAAE,CAAC,eAAD;AAXF;AA3BkB,GAA3B,CAxjBsB,CAkmBtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBkE,OAAlB,GAA4B;AAC1BvF,IAAAA,IAAI,EAAE,SADoB;AAE1BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFmB;AAG1B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OAPmB,CASpB;;;AACA0B,MAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;AACA,UAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR,CAXE,CAapB;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KAnByB;AAoB1B9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CACX,CADW,EAEX,CAFW,EAGX,CAHW,EAIX,CAJW,EAKX,CALW,EAMX,CANW,EAOX,CAPW,CADR;AAULhB,MAAAA,KAAK,EAAE,CAAC,eAAD;AAVF;AApBmB,GAA5B,CAnmBsB,CAqoBtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBmE,OAAlB,GAA4B;AAC1BxF,IAAAA,IAAI,EAAE,SADoB;AAE1BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFmB;AAG1B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,UAAI,KAAK9B,KAAL,CAAW+D,WAAX,CAAuBC,KAAvB,CAA6B7D,IAA7B,CAAkCjC,GAAlC,CAAJ,EAA4C;AAC1CA,QAAAA,GAAG,GAAG,MAAMA,GAAG,CAACuF,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAN,GAA4BvF,GAAG,CAACuF,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAA5B,GAAkDvF,GAAG,CAACuF,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAxD;AACD,OAPmB,CASpB;;;AACA,WAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OAZmB,CAcpB;;;AACA,UAAI,KAAKY,KAAL,CAAW+D,WAAX,CAAuBE,KAAvB,CAA6B9D,IAA7B,CAAkCjC,GAAlC,CAAJ,EAA4C;AAC1C;AACA,YAAIA,GAAG,CAAC8C,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACzBF,UAAAA,KAAK,IAAI,EAAT;AACD,SAFD,MAEO;AACLA,UAAAA,KAAK,IAAI,CAAT;AACD;AACF,OAtBmB,CAwBpB;;;AACAA,MAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;;AACA,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACfA,QAAAA,KAAK,GAAG,GAAR;AACD,OAFD,MAEO;AACLA,QAAAA,KAAK,GAAG6B,MAAM,CAACC,YAAP,CAAoB9B,KAAK,GAAG,EAA5B,CAAR;AACD,OA9BmB,CAgCpB;;;AACAgB,MAAAA,MAAM,GAAG5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAT;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KAtCyB;AAuC1B9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CADR;AAEL8C,MAAAA,WAAW,EAAE;AACXC,QAAAA,KAAK,EAAE,YADI;AAEXC,QAAAA,KAAK,EAAE;AAFI,OAFR;AAMLhE,MAAAA,KAAK,EAAE,CACL,oBADK,EAEL,iCAFK,EAGL,wBAHK;AANF;AAvCmB,GAA5B,CAtoBsB,CA2rBtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBuE,KAAlB,GAA0B;AACxB5F,IAAAA,IAAI,EAAE,OADkB;AAExBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFiB;AAGxB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIC,IAAJ;AACA,UAAIe,MAAJ,CAHoB,CAKpB;;AACA,UAAI,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,KAAqB,CAAzB,EAA4B;AAC1B,eAAO,KAAP;AACD;;AAEDL,MAAAA,IAAI,GAAG,CAAC7C,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAR;;AACA,UAAKL,IAAI,GAAG,CAAR,IAAeA,IAAI,GAAG,GAAR,IAAgBA,IAAI,KAAK,GAAzB,IAAgCA,IAAI,KAAK,GAA3D,EAAgE;AAC9D,eAAO,KAAP;AACD,OAbmB,CAepB;;;AACA,WAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B2B,QAAAA,IAAI,GAAG,CAAC7C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAAxB;AACA,YAAI2B,IAAI,GAAG,CAAX,EACED,KAAK,IAAII,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAAG,EAAlB,IAAwBA,IAAI,GAAG,EAAxC,CADF,KAGED,KAAK,IAAIC,IAAT;AACH,OAtBmB,CAwBpB;;;AACAD,MAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;;AACA,UAAIA,KAAK,GAAG,CAAZ,EAAe;AACbA,QAAAA,KAAK,GAAG,CAAR;AACD,OA5BmB,CA8BpB;;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAV;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KApCuB;AAqCxB9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,gBAAD;AAFF;AArCiB,GAA1B,CA5rBsB,CAuuBtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBwE,MAAlB,GAA2B;AACzB7F,IAAAA,IAAI,EAAE,QADmB;AAEzBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFkB;AAGzB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;AACA;;AACA,UAAK,QAAD,CAAW3B,IAAX,CAAgBjC,GAAhB,CAAJ,EAA0B;AACxB,eAAO,CAAC,CAAE,uBAAD,CAA0BiC,IAA1B,CAA+BjC,GAA/B,CAAT;AACD,OAFD,MAEO;AACL;AACA,aAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B0B,UAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,SAJI,CAML;;;AACA,YAAI0B,KAAK,GAAG,EAAR,KAAe,CAAf,IAAoB5C,GAAG,CAAC,CAAD,CAAH,KAAW,CAAnC,EAAsC4C,KAAK,GAAGA,KAAK,GAAG,EAAhB;;AAEtC,YAAIA,KAAK,GAAG,EAAR,KAAe,CAAnB,EAAsB;AACpBA,UAAAA,KAAK,GAAG,IAAIA,KAAK,GAAG,EAApB;AACD,SAFD,MAEO,IAAIA,KAAK,GAAG,EAAR,GAAa,CAAjB,EAAoB;AACzBA,UAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;AACD,SAFM,MAEA,IAAIA,KAAK,GAAG,EAAR,GAAa,CAAjB,EAAoB;AACzBA,UAAAA,KAAK,GAAG,IAAIA,KAAK,GAAG,EAApB;AACD,SAfI,CAiBL;;;AACAgB,QAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAV;AACA,eAAON,KAAK,KAAKgB,MAAjB;AACD;AACF,KAhCwB;AAiCzB9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,gBAAD;AAFF;AAjCkB,GAA3B,CAxuBsB,CA+wBtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkByE,SAAlB,GAA8B;AAC5B9F,IAAAA,IAAI,EAAE,WADsB;AAE5BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFqB;AAG5B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,eAASmG,aAAT,CAAuBnG,GAAvB,EAA4BoG,UAA5B,EAAwCC,GAAxC,EAA6C;AAC3C,eAAO,CAACrG,GAAG,CAAC8C,MAAJ,CAAWuD,GAAX,CAAD,GAAmBD,UAAU,CAACC,GAAD,CAApC;AACD;;AAED,eAASC,uBAAT,CAAiCtG,GAAjC,EAAsC4C,KAAtC,EAA6Cd,KAA7C,EAAoD;AAClD,YAAIc,KAAK,GAAG,EAAR,KAAe,EAAnB,EAAuB;AACrBA,UAAAA,KAAK,GAAG,CAAR;;AACA,eAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,YAAAA,KAAK,IAAIuD,aAAa,CAACnG,GAAD,EAAM8B,KAAK,CAACiB,WAAN,CAAkBzC,KAAxB,EAA+BY,CAA/B,CAAtB;AACD;AACF;;AAED,eAAO0B,KAAP;AACD;;AAED,eAAS2D,YAAT,CAAsBvG,GAAtB,EAA2B4C,KAA3B,EAAkC;AAChC,aAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,UAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,IAAkBA,CAAC,GAAG,CAAtB,CAAT;AACD;;AACD,eAAO0B,KAAP;AACD;;AAED,eAAS6C,UAAT,CAAoB7C,KAApB,EAA2B;AACzBA,QAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;;AACA,YAAIA,KAAK,KAAK,EAAd,EAAkB;AAChBA,UAAAA,KAAK,GAAG,CAAR;AACD;;AAED,eAAOA,KAAP;AACD;;AAED,eAAS4D,eAAT,CAAyBxG,GAAzB,EAA8B8B,KAA9B,EAAqC;AACnC;AACA,YAAIc,KAAK,GAAG,CAAZ;;AACA,YAAI5C,GAAG,CAACmB,MAAJ,KAAe,CAAnB,EAAsB;AACpB;AACA,cAAI,CAAE,SAAD,CAAYc,IAAZ,CAAiBjC,GAAjB,CAAL,EAA4B,OAAO,KAAP,CAFR,CAIpB;;AACA4C,UAAAA,KAAK,GAAG2D,YAAY,CAACvG,GAAD,EAAM4C,KAAN,CAApB,CALoB,CAOpB;;AACAA,UAAAA,KAAK,GAAG0D,uBAAuB,CAACtG,GAAD,EAAM4C,KAAN,EAAad,KAAb,CAA/B,CARoB,CAUpB;;AACAc,UAAAA,KAAK,GAAG6C,UAAU,CAAC7C,KAAD,CAAlB,CAXoB,CAapB;;AACA,cAAIgB,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAd;AACA,iBAAON,KAAK,KAAKgB,MAAjB;AACD;;AACD,eAAO,KAAP;AACD;;AAED,eAAS6C,cAAT,CAAwBzG,GAAxB,EAA6B4C,KAA7B,EAAoCd,KAApC,EAA2C;AACzC,aAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BkB,UAAAA,KAAK,IAAIuD,aAAa,CAACnG,GAAD,EAAM8B,KAAK,CAACiB,WAAN,CAAkB2D,GAAxB,EAA6BhF,CAA7B,CAAtB;AACD;;AACD,eAAOkB,KAAP;AACD;;AAED,eAAS+D,yBAAT,CAAmC3G,GAAnC,EAAwC4C,KAAxC,EAA+Cd,KAA/C,EAAsD;AACpD,YAAIc,KAAK,GAAG,EAAR,KAAe,EAAnB,EAAuB;AACrBA,UAAAA,KAAK,GAAG,CAAR;;AACA,eAAK,IAAIgE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BhE,YAAAA,KAAK,IAAIuD,aAAa,CAACnG,GAAD,EAAM8B,KAAK,CAACiB,WAAN,CAAkB8D,GAAxB,EAA6BD,CAA7B,CAAtB;AACD;AACF;;AAED,eAAOhE,KAAP;AACD;;AAED,eAASkE,gBAAT,CAA0B9G,GAA1B,EAA+B8B,KAA/B,EAAsC;AACpC,YAAIc,KAAK,GAAG,CAAZ,CADoC,CAGpC;;AACA,YAAI5C,GAAG,CAACmB,MAAJ,KAAe,EAAnB,EAAuB;AACrB;AACA,cAAI,CAAEW,KAAK,CAACsB,KAAP,CAAcnB,IAAd,CAAmBjC,GAAnB,CAAL,EAA8B,OAAO,KAAP,CAFT,CAIrB;;AACA4C,UAAAA,KAAK,GAAG6D,cAAc,CAACzG,GAAD,EAAM4C,KAAN,EAAad,KAAb,CAAtB,CALqB,CAOrB;;AACAc,UAAAA,KAAK,GAAG+D,yBAAyB,CAAC3G,GAAD,EAAM4C,KAAN,EAAad,KAAb,CAAjC,CARqB,CAUrB;;AACAc,UAAAA,KAAK,GAAG6C,UAAU,CAAC7C,KAAD,CAAlB,CAXqB,CAarB;;AACA,cAAIgB,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAd;AACA,iBAAON,KAAK,KAAKgB,MAAjB;AACD;;AAED,eAAO,KAAP;AACD;;AAED,aAAO4C,eAAe,CAACxG,GAAD,EAAM,KAAK8B,KAAX,CAAf,IAAoCgF,gBAAgB,CAAC9G,GAAD,EAAM,KAAK8B,KAAX,CAA3D;AACD,KAtG2B;AAuG5BA,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE;AACXzC,QAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CADI;AAEXoG,QAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,CAFM;AAGXG,QAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B;AAHM,OADR;AAMLzD,MAAAA,KAAK,EAAE,UANF;AAOLrB,MAAAA,KAAK,EAAE,CAAC,sBAAD;AAPF;AAvGqB,GAA9B,CAhxBsB,CAk4BtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBsF,UAAlB,GAA+B;AAC7B3G,IAAAA,IAAI,EAAE,YADuB;AAE7BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFsB;AAG7B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4D,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAd;AACA,UAAIuC,UAAU,GAAG,CAACzF,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,GAAmB,EAApC,CAFoB,CAGpB;;AAEA,aAAOuC,UAAU,KAAK7B,MAAtB;AACD,KAT4B;AAU7B9B,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CAAC,eAAD;AADF;AAVsB,GAA/B,CAn4BsB,CAk5BtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBuF,KAAlB,GAA0B;AACxB5G,IAAAA,IAAI,EAAE,OADkB;AAExBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFiB;AAGxB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OAPmB,CASpB;;;AACA0B,MAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB,CAVoB,CAYpB;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KAlBuB;AAmBxB9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,oBAAD;AAFF;AAnBiB,GAA1B,CAn5BsB,CA46BtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBwF,WAAlB,GAAgC;AAC9B7G,IAAAA,IAAI,EAAE,aADwB;AAE9BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFuB;AAG9B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OAPmB,CASpB;;;AACA0B,MAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;;AACA,UAAIA,KAAK,GAAG,CAAZ,EAAe;AACbA,QAAAA,KAAK,GAAG,CAAR;AACD,OAbmB,CAepB;;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KArB6B;AAsB9B9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,qBAAD;AAFF;AAtBuB,GAAhC,CA76BsB,CAy8BtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkByF,MAAlB,GAA2B;AACzB9G,IAAAA,IAAI,EAAE,QADmB;AAEzBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFkB;AAGzB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAGpB;AAEA;;AACA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OARmB,CAUpB;;;AACA0B,MAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;;AAEA,UAAIA,KAAK,KAAK,EAAd,EAAkB;AAChBA,QAAAA,KAAK,GAAG,CAAR;AACD;;AAED,UAAIA,KAAK,GAAG,EAAZ,EAAgB;AACd;AACAgB,QAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,eAAON,KAAK,KAAKgB,MAAjB;AACD;AACF,KAzBwB;AA0BzB9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,eAAD;AAFF;AA1BkB,GAA3B,CA18BsB,CA0+BtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB0F,MAAlB,GAA2B;AACzB/G,IAAAA,IAAI,EAAE,QADmB;AAEzBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFkB;AAGzB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OAPmB,CASpB;;;AACA0B,MAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;;AACA,UAAIA,KAAK,GAAG,CAAZ,EAAe;AACbA,QAAAA,KAAK,GAAG,CAAR;AACD,OAbmB,CAepB;;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAV;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KArBwB;AAsBzB9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,gBAAD;AAFF;AAtBkB,GAA3B,CA3+BsB,CAugCtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB2F,QAAlB,GAA6B;AAC3BhH,IAAAA,IAAI,EAAE,UADqB;AAE3BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFoB;AAG3B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OAPmB,CASpB;;;AACA0B,MAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;;AACA,UAAIA,KAAK,GAAG,CAAZ,EAAe;AACbA,QAAAA,KAAK,GAAG,CAAR;AACD,OAbmB,CAepB;;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAON,KAAK,KAAKgB,MAAjB;AACD,KArB0B;AAsB3B9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,eAAD;AAFF;AAtBoB,GAA7B,CAxgCsB,CAoiCtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB4F,OAAlB,GAA4B;AAC1BjH,IAAAA,IAAI,EAAE,SADoB;AAE1BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFmB;AAG1B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,UAAI0D,SAAS,GAAGtH,GAAG,CAACmB,MAApB;AACA,UAAI4B,WAAW,GAAG,KAAKjB,KAAL,CAAWiB,WAAX,CAAuBG,KAAvB,CAA6B,KAAKoE,SAAlC,CAAlB;;AAEA,WAAK,IAAIpG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,GAAG,CAACmB,MAAJ,GAAa,CAAjC,EAAoCD,CAAC,EAArC,EAAyC;AACvC0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB6B,WAAW,CAAC7B,CAAD,CAArC;AACD,OAVmB,CAYpB;;;AACA0B,MAAAA,KAAK,GAAI,KAAKA,KAAN,GAAe,EAAvB;AACA,UAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR,CAdE,CAgBpB;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAUlD,GAAG,CAACmB,MAAJ,GAAa,CAAvB,EAA0BnB,GAAG,CAACmB,MAA9B,CAAV;AACA,aAAOyB,KAAK,KAAKgB,MAAjB;AACD,KAtByB;AAuB1B9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,sBAAD;AAFF;AAvBmB,GAA5B,CAriCsB,CAkkCtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB8F,MAAlB,GAA2B;AACzBnH,IAAAA,IAAI,EAAE,oBADmB;AAEzBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFkB;AAGzB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,eAASwH,gBAAT,CAA0BxH,GAA1B,EAA+B8B,KAA/B,EAAsC;AACpC,YAAIc,KAAK,GAAG,CAAZ;;AAEA,YAAI5C,GAAG,CAACmB,MAAJ,KAAe,EAAnB,EAAuB;AACrB,eAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B0B,YAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiBY,KAAK,CAACiB,WAAN,CAAkB0E,GAAlB,CAAsBvG,CAAtB,CAA1B;AACD;;AAED0B,UAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;;AACA,cAAIA,KAAK,GAAG,CAAZ,EAAe;AACbA,YAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACD,WARoB,CAUrB;;;AACA,cAAIgB,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAd;AACA,iBAAON,KAAK,KAAKgB,MAAjB;AACD;;AAED,eAAO,KAAP;AACD;;AAED,eAAS8D,gBAAT,CAA0B1H,GAA1B,EAA+B8B,KAA/B,EAAsC;AACpC,YAAI6F,MAAM,GAAG,CAAb;AACA,YAAIC,MAAM,GAAG,CAAb;;AAEA,YAAI5H,GAAG,CAACmB,MAAJ,KAAe,EAAnB,EAAuB;AACrB,eAAK,IAAI4D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B4C,YAAAA,MAAM,IAAI,CAAC3H,GAAG,CAAC8C,MAAJ,CAAWiC,CAAX,CAAD,GAAiBjD,KAAK,CAACiB,WAAN,CAAkB8E,GAAlB,CAAsB9C,CAAtB,CAA3B;AACD;;AAED4C,UAAAA,MAAM,GAAGA,MAAM,GAAG,EAAlB;;AAEA,cAAIA,MAAM,GAAG,CAAb,EAAgB;AACdA,YAAAA,MAAM,GAAGA,MAAM,GAAG,EAAlB;AACD;;AAED,eAAK,IAAIjG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BkG,YAAAA,MAAM,IAAI,CAAC5H,GAAG,CAAC8C,MAAJ,CAAWpB,CAAX,CAAD,GAAiBI,KAAK,CAACiB,WAAN,CAAkB+E,GAAlB,CAAsBpG,CAAtB,CAA3B;AACD;;AAEDkG,UAAAA,MAAM,GAAGA,MAAM,GAAG,EAAlB;;AACA,cAAIA,MAAM,GAAG,CAAb,EAAgB;AACdA,YAAAA,MAAM,GAAGA,MAAM,GAAG,EAAlB;AACD,WAlBoB,CAoBrB;AACA;;;AACA,cAAIhE,MAAM,GAAI+D,MAAM,KAAK,CAAC3H,GAAG,CAACkD,KAAJ,CAAU,EAAV,EAAc,EAAd,CAA1B;AACA,cAAI6E,OAAO,GAAIH,MAAM,KAAK,CAAC5H,GAAG,CAACkD,KAAJ,CAAU,EAAV,EAAc,EAAd,CAA3B;AACA,iBAAQU,MAAD,IAAamE,OAApB;AACD;;AAED,eAAO,KAAP;AACD,OAtDmB,CAwDpB;;;AACA,aAAOP,gBAAgB,CAACxH,GAAD,EAAM,KAAK8B,KAAX,CAAhB,IAAqC4F,gBAAgB,CAAC1H,GAAD,EAAM,KAAK8B,KAAX,CAA5D;AACD,KA7DwB;AA8DzBA,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE;AACX0E,QAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CADM;AAEXI,QAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,CAFM;AAGXC,QAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC;AAHM,OADR;AAML/F,MAAAA,KAAK,EAAE,CAAC,uBAAD;AANF;AA9DkB,GAA3B,CAnkCsB,CA2oCtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBuG,MAAlB,GAA2B;AACzB5H,IAAAA,IAAI,EAAE,QADmB;AAEzBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFkB;AAGzB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB;AAEA,UAAIsE,OAAO,GAAG,EAAd;AACA,UAAIC,GAAG,GAAG,CAAV;AACA,UAAIkB,UAAJ;;AAEA,WAAK,IAAIvE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B;AACAqD,QAAAA,GAAG,GAAG,CAAC,CAACvE,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiBoD,OAAlB,IAA6B,EAAnC;;AACA,YAAIC,GAAG,KAAK,CAAZ,EAAe;AACbA,UAAAA,GAAG,GAAG,EAAN;AACD;;AACDD,QAAAA,OAAO,GAAI,IAAIC,GAAL,GAAY,EAAtB;AACD,OAdmB,CAgBpB;;;AACA,UAAIX,MAAM,GAAG,CAAb;AACA6B,MAAAA,UAAU,GAAG,CAACnB,OAAO,GAAI,CAACtE,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAb,IAAiC,EAA9C;AACA,aAAOuC,UAAU,KAAK7B,MAAtB;AACD,KAvBwB;AAwBzB9B,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CAAC,eAAD;AADF;AAxBkB,GAA3B,CA5oCsB,CAyqCtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBwG,iBAAlB,GAAsC;AACpC7H,IAAAA,IAAI,EAAE,WAD8B;AAEpCG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAF6B;AAGpC4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4D,MAAM,GAAG,CAAb;AACA,UAAI6B,UAAU,GAAIzF,GAAG,GAAG,EAAxB;AACA,aAAOyF,UAAU,KAAK7B,MAAtB;AACD,KAPmC;AAQpC9B,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CAAC,8BAAD;AADF;AAR6B,GAAtC,CA1qCsB,CAurCtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkByG,QAAlB,GAA6B;AAC3B9H,IAAAA,IAAI,EAAE,UADqB;AAE3BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFoB;AAG3B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OAPmB,CASpB;;;AACA0B,MAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;;AACA,UAAIA,KAAK,KAAK,EAAd,EAAkB;AAChBA,QAAAA,KAAK,GAAG,CAAR;AACD,OAbmB,CAepB;AACA;;;AACAgB,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAO,CAAC,EAAEN,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAKgB,MAA5B,CAAR;AACD,KAtB0B;AAuB3B9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,oBAAD;AAFF;AAvBoB,GAA7B,CAxrCsB,CAqtCtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkB0G,KAAlB,GAA0B;AACxB/H,IAAAA,IAAI,EAAE,OADkB;AAExBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFiB;AAGxB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAIkB,CAAC,GAAG,CAAR;AACA,UAAI0B,KAAK,GAAG,CAAZ;AACA,UAAIC,IAAJ;AACA,UAAIe,MAAJ,CAJoB,CAMpB;;AACA,UAAI,KAAK9B,KAAL,CAAW+C,UAAX,CAAsB,CAAtB,EAAyB5C,IAAzB,CAA8BjC,GAA9B,CAAJ,EAAwC;AACtC;AACA,aAAKkB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtB2B,UAAAA,IAAI,GAAG7C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAC,GAAG,CAAf,IAAoB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA3B;AACA,cAAI2B,IAAI,GAAG,CAAX,EACED,KAAK,IAAII,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAAG,EAAlB,IAAwBA,IAAI,GAAG,EAAxC,CADF,KAGED,KAAK,IAAIC,IAAT;AACH,SARqC,CAStC;;;AACAD,QAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;;AACA,YAAIA,KAAK,KAAK,EAAd,EAAkB;AAChBA,UAAAA,KAAK,GAAG,CAAR;AACD,SAbqC,CAetC;;;AACAgB,QAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,eAAON,KAAK,KAAKgB,MAAjB;AACD,OAlBD,CAoBA;AApBA,WAqBK,IAAI,KAAK9B,KAAL,CAAW+C,UAAX,CAAsB,CAAtB,EAAyB5C,IAAzB,CAA8BjC,GAA9B,CAAJ,EAAwC;AAC3C;AACA,aAAKkB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtB2B,UAAAA,IAAI,GAAG7C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAC,GAAG,CAAf,IAAoB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA3B;AACA,cAAI2B,IAAI,GAAG,CAAX,EACED,KAAK,IAAII,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAAG,EAAlB,IAAwBA,IAAI,GAAG,EAAxC,CADF,KAGED,KAAK,IAAIC,IAAT;AACH,SAR0C,CAU3C;;;AACAD,QAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;AACAA,QAAAA,KAAK,GAAG6B,MAAM,CAACC,YAAP,CAAoB9B,KAAK,GAAG,EAA5B,CAAR,CAZ2C,CAc3C;;AACAgB,QAAAA,MAAM,GAAG5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAT;AACA,eAAON,KAAK,KAAKgB,MAAjB;AACD,OAjBI,CAmBL;AAnBK,WAoBA,IAAI,KAAK9B,KAAL,CAAW+C,UAAX,CAAsB,CAAtB,EAAyB5C,IAAzB,CAA8BjC,GAA9B,CAAJ,EAAwC;AAC3C,YAAIoI,UAAU,GAAGpI,GAAjB;AACA,YAAIoI,UAAU,CAAC7C,SAAX,CAAqB,CAArB,EAAwB,CAAxB,MAA+B,GAAnC,EAAwC6C,UAAU,GAAGA,UAAU,CAACvH,OAAX,CAAmB,GAAnB,EAAwB,GAAxB,CAAb;AACxC,YAAIuH,UAAU,CAAC7C,SAAX,CAAqB,CAArB,EAAwB,CAAxB,MAA+B,GAAnC,EAAwC6C,UAAU,GAAGA,UAAU,CAACvH,OAAX,CAAmB,GAAnB,EAAwB,GAAxB,CAAb;AACxC+C,QAAAA,MAAM,GAAG,0BAA0Bd,MAA1B,CAAiC,CAACsF,UAAU,CAAC7C,SAAX,CAAqB,CAArB,EAAwB,CAAxB,CAAD,GAA8B,EAA/D,CAAT;AACA,eAAO6C,UAAU,CAACtF,MAAX,CAAkB,CAAlB,MAAyBc,MAAhC;AACD,OANI,CAQL;AARK,WASA,IAAI,KAAK9B,KAAL,CAAW+C,UAAX,CAAsB,CAAtB,EAAyB5C,IAAzB,CAA8BjC,GAA9B,CAAJ,EAAwC;AAC3C4D,QAAAA,MAAM,GAAG,0BAA0Bd,MAA1B,CAAiC,CAAC9C,GAAG,CAACuF,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAD,GAAuB,EAAxD,CAAT;AACA,eAAOvF,GAAG,CAAC8C,MAAJ,CAAW,CAAX,MAAkBc,MAAzB;AACD,OAHI,MAGE,OAAO,KAAP;AACR,KAhEuB;AAiExB9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CADR;AAELhB,MAAAA,KAAK,EAAE,CACL,oBADK,EAEL,6BAFK,EAGL,2BAHK,EAIL,0BAJK,CAFF;AAQL8C,MAAAA,UAAU,EAAE,CACV,oBADU,EAEV,yBAFU,EAGV,uBAHU,EAIV,uBAJU;AARP;AAjEiB,GAA1B,CAttCsB,CAwyCtB;;AACAvC,EAAAA,OAAO,CAACb,SAAR,CAAkB4G,MAAlB,GAA2B;AACzBjI,IAAAA,IAAI,EAAE,QADmB;AAEzBG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFkB;AAGzB4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4D,MAAJ,CADoB,CAGpB;;AACA,UAAI0E,CAAC,GAAG,CAAR;AACA,UAAIC,KAAJ;;AACA,WAAK,IAAIrH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,GAAGA,CAAC,GAAG,CAA/B,EAAkC;AAChCqH,QAAAA,KAAK,GAAG,CAACvI,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAT;AACAoH,QAAAA,CAAC,IAAItF,IAAI,CAACC,KAAL,CAAWsF,KAAK,GAAG,CAAnB,IAA0BA,KAAK,GAAG,CAAT,GAAc,EAA5C;AACD,OATmB,CAWpB;;;AACA,UAAIC,CAAC,GAAG,CAAR;;AACA,WAAK,IAAIzD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,GAAGA,CAAC,GAAG,CAA/B,EAAkC;AAChCyD,QAAAA,CAAC,IAAI,CAACxI,GAAG,CAAC8C,MAAJ,CAAWiC,CAAX,CAAN;AACD;;AAED,UAAIU,UAAU,GAAG,CAAC,KAAK,CAAC6C,CAAC,GAAGE,CAAL,IAAU,EAAhB,IAAsB,EAAvC,CAjBoB,CAmBpB;;AACA5E,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAV;AAEA,aAAOuC,UAAU,KAAK7B,MAAtB;AACD,KA1BwB;AA2BzB9B,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CAAC,kBAAD;AADF;AA3BkB,GAA3B,CAzyCsB,CAy0CtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBgH,WAAlB,GAAgC;AAC9BrI,IAAAA,IAAI,EAAE,aADwB;AAE9BG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFuB;AAG9B4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;;AACA,WAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OAJmB,CAMpB;;;AACA0B,MAAAA,KAAK,GAAG,KAAKA,KAAK,GAAG,EAArB;AACA,UAAIA,KAAK,KAAK,EAAd,EAAkB,OAAO,KAAP;AAClB,UAAIA,KAAK,KAAK,EAAd,EAAkBA,KAAK,GAAG,CAAR,CATE,CAWpB;;AACA,UAAIgB,MAAM,GAAG,CAAC5D,GAAG,CAACgE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAd;AACA,aAAOpB,KAAK,KAAKgB,MAAjB;AACD,KAjB6B;AAkB9B9B,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CADR;AAELhB,MAAAA,KAAK,EAAE,CAAC,uBAAD;AAFF;AAlBuB,GAAhC,CA10CsB,CAk2CtB;;AACAO,EAAAA,OAAO,CAACb,SAAR,CAAkBiH,cAAlB,GAAmC;AACjCtI,IAAAA,IAAI,EAAE,gBAD2B;AAEjCG,IAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAF0B;AAGjC4B,IAAAA,MAAM,EAAE,UAASnC,GAAT,EAAc;AACpB,UAAI4C,KAAK,GAAG,CAAZ;AACA,UAAIgB,MAAJ,CAFoB,CAIpB;;AACA,UAAI5D,GAAG,CAACgE,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,IAAzB,EAA+B;AAC7BJ,QAAAA,MAAM,GAAG,GAAT;AACA,eAAO5D,GAAG,CAACgE,MAAJ,CAAW,CAAX,EAAc,CAAd,IAAmBJ,MAA1B;AACD,OARmB,CAUpB;;;AACA,UAAI5D,GAAG,CAACgE,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,IAAzB,EAA+B;AAC7BJ,QAAAA,MAAM,GAAG,GAAT;AACA,eAAO5D,GAAG,CAACgE,MAAJ,CAAW,CAAX,EAAc,CAAd,IAAmBJ,MAA1B;AACD,OAdmB,CAgBpB;AAEA;;;AACA,UAAI,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,CAAD,KAAkB,CAAtB,EAAyB,OAAO,KAAP,CAnBL,CAqBpB;;AACA,UAAIyF,EAAE,GAAG,CAAC3I,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV,CAtBoB,CAwBpB;;AACA,WAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B0B,QAAAA,KAAK,IAAI,CAAC5C,GAAG,CAAC8C,MAAJ,CAAW5B,CAAX,CAAD,GAAiB,KAAKY,KAAL,CAAWiB,WAAX,CAAuB7B,CAAvB,CAA1B;AACD,OA3BmB,CA6BpB;AACA;AAEA;;;AACA,UAAIuE,UAAU,GAAG7C,KAAjB;;AACA,aAAO6C,UAAU,GAAG,CAApB,EAAuB;AACrBA,QAAAA,UAAU,GAAGA,UAAU,GAAG,EAA1B;AACD,OApCmB,CAsCpB;AACA;AACA;;;AACAA,MAAAA,UAAU,GAAGzC,IAAI,CAAC4F,GAAL,CAASnD,UAAT,CAAb;AACA,UAAIA,UAAU,KAAK,CAACzF,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAhB,IAAmCyF,EAAE,GAAG,OAAxC,KAAoDA,EAAE,GAAG,MAAL,IAAeA,EAAE,GAAG,MAAxE,MAAoFA,EAAE,GAAG,OAAL,IAAgBA,EAAE,GAAG,OAAzG,CAAJ,EAAuH,OAAO,IAAP,CA1CnG,CA4CpB;;AACA,UAAIlD,UAAU,IAAI,EAAlB,EACEA,UAAU,GAAGA,UAAU,GAAG,EAA1B,CADF,KAGEA,UAAU,GAAGA,UAAU,GAAG,EAA1B;AACF7B,MAAAA,MAAM,GAAG,CAAC5D,GAAG,CAACkD,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,aAAO,CAAC,EAAEuC,UAAU,KAAK7B,MAAf,IAAyB+E,EAAE,GAAG,OAAhC,CAAR;AACD,KAtDgC;AAuDjC7G,IAAAA,KAAK,EAAE;AACLiB,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CADR;AAELhB,MAAAA,KAAK,EAAE,CACL,gBADK,EAEL,iBAFK,EAGL,kBAHK,EAIL,kBAJK;AAFF;AAvD0B,GAAnC,CAn2CsB,CAs6CtB;;AAEA,MAAI,OAAO8G,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACvG,OAAzC,EAAkDuG,MAAM,CAACvG,OAAP,GAAiBA,OAAjB;AAElD,SAAOA,OAAP;AAED,CA56CW,EAAZ","sourcesContent":["var jsvat = (function() {\n\n  'use strict'\n\n  function Result(vat, isValid, country) {\n    this.value = vat || null\n    this.isValid = !!isValid\n\n    if (country) {\n      this.country = {\n        name: country.name,\n        isoCode: {\n          short: country.codes[0],\n          long: country.codes[1],\n          numeric: country.codes[2]\n        }\n      }\n    }\n  }\n\n  function removeExtraChars(vat) {\n    vat = vat || ''\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '')\n  }\n\n  function isValEqToCode(val, codes) {\n    return (val === codes[0] || val === codes[1] || val === codes[2])\n  }\n\n  function isInList(list, country) {\n    if (!list) return false\n\n    for (var i = 0; i < list.length; i++) {\n      var val = list[i].toUpperCase()\n      if (val === country.name.toUpperCase()) return true\n      if (isValEqToCode(val, country.codes)) return true\n    }\n\n    return false\n  }\n\n  function isBlocked(country, blocked, allowed) {\n    var isBlocked = isInList(blocked, country)\n    if (isBlocked) return true\n    var isAllowed = isInList(allowed, country)\n    return allowed.length > 0 && !isAllowed\n  }\n\n  function getCountry(vat, countries) {\n    for (var k in countries) {\n      if (countries.hasOwnProperty(k)) {\n        var regexpValidRes = isVatValidToRegexp(vat, countries[k].rules.regex)\n        if (regexpValidRes.isValid) return countries[k]\n      }\n    }\n\n    return null\n  }\n\n  function isVatValidToRegexp(vat, regexArr) {\n    for (var i = 0; i < regexArr.length; i++) {\n      var regex = regexArr[i]\n      var isValid = regex.test(vat)\n      if (isValid) return {\n        isValid: true,\n        regex: regex\n      }\n    }\n\n    return {\n      isValid: false\n    }\n  }\n\n  function isVatMathValid(vat, country) {\n    return country.calcFn(vat)\n  }\n\n  function isVatValid(vat, country) {\n    var regexpValidRes = isVatValidToRegexp(vat, country.rules.regex)\n    if (!regexpValidRes.isValid) return false\n    return isVatMathValid(regexpValidRes.regex.exec(vat)[2], country)\n  }\n\n  var exports = {\n    blocked: [],\n    allowed: [],\n    countries: {},\n    checkVAT: function(vat) {\n      if (!vat) throw new Error('VAT should be specified')\n      var cleanVAT = removeExtraChars(vat)\n      var result = new Result(cleanVAT)\n\n      var country = getCountry(cleanVAT, this.countries)\n      if (!country) return result\n      if (isBlocked(country, this.blocked, this.allowed)) return new Result(cleanVAT, false, country)\n\n      var isValid = isVatValid(cleanVAT, country)\n      if (isValid) return new Result(cleanVAT, isValid, country)\n\n      return result\n    }\n  }\n\n\n  // eslint-disable-next-line no-undef\n  exports.countries.austria = {\n    name: 'Austria',\n    codes: ['AT', 'AUT', '040'],\n    calcFn: function(vat) {\n      var total = 0\n      var temp\n\n      for (var i = 0; i < 7; i++) {\n        temp = vat.charAt(i) * this.rules.multipliers[i]\n\n        if (temp > 9) {\n          total += Math.floor(temp / 10) + temp % 10\n        } else {\n          total += temp\n        }\n      }\n\n      total = 10 - (total + 4) % 10\n      if (total === 10) total = 0\n\n      return total === +vat.slice(7, 8)\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1],\n      regex: [/^(AT)U(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.belgium = {\n    name: 'Belgium',\n    codes: ['BE', 'BEL', '056'],\n    calcFn: function(vat) {\n      if (vat.length === 9) {\n        vat = '0' + vat\n      }\n\n      if (+vat.slice(1, 2) === 0) return false\n\n      var check = (97 - +vat.slice(0, 8) % 97)\n      return check === +vat.slice(8, 10)\n    },\n    rules: {\n      regex: [/^(BE)(0?\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.bulgaria = {\n    name: 'Bulgaria',\n    codes: ['BG', 'BGR', '100'],\n    calcFn: function(vat) {\n      function _increase(value, vat, from, to, incr) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * (i + incr)\n        }\n        return value\n      }\n\n      function _increase2(value, vat, from, to, multipliers) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * multipliers[i]\n        }\n        return value\n      }\n\n      function _checkNineLengthVat(vat) {\n        var total\n        var temp = 0\n        var expect = +vat.slice(8)\n\n        temp = _increase(temp, vat, 0, 8, 1)\n\n        total = temp % 11\n        if (total !== 10) {\n          return total === expect\n        }\n\n        temp = _increase(0, vat, 0, 8, 3)\n\n        total = temp % 11\n        if (total === 10) total = 0\n\n        return total === expect\n      }\n\n      function _isPhysicalPerson(vat, rules) {\n        // 10 digit VAT code - see if it relates to a standard physical person\n        if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n          // Check month\n          var month = +vat.slice(2, 4)\n          if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n            var total = _increase2(0, vat, 0, 9, rules.multipliers.physical)\n            // Establish check digit.\n            total = total % 11\n            if (total === 10) total = 0\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total === +vat.substr(9, 1)) return true\n          }\n        }\n\n        return false\n      }\n\n      function _isForeigner(vat, rules) {\n        // Extract the next digit and multiply by the counter.\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.foreigner)\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total % 10 === +vat.substr(9, 1)) {\n          return true\n        }\n      }\n\n      function _miscellaneousVAT(vat, rules) {\n        // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.miscellaneous)\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) return false\n        if (total === 11) total = 0\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        var expect = +vat.substr(9, 1)\n        return total === expect\n      }\n\n      if (vat.length === 9) {\n        return _checkNineLengthVat(vat)\n      } else {\n        return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules)\n      }\n    },\n    rules: {\n      multipliers: {\n        physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n        foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n        miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n      },\n      regex: [/^(BG)(\\d{9,10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.croatia = {\n    name: 'Croatia',\n    codes: ['HR', 'HRV', '191'],\n    calcFn: function(vat) {\n      var expect\n\n      // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n      var product = 10\n      var sum = 0\n\n      for (var i = 0; i < 10; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      expect = +vat.slice(10, 11)\n      return (product + expect) % 10 === 1\n    },\n    rules: {\n      regex: [/^(HR)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.cyprus = {\n    name: 'Cyprus',\n    codes: ['CY', 'CYP', '196'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Not allowed to start with '12'\n      if (+vat.slice(0, 2) === 12) return false\n\n      // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        var temp = +vat.charAt(i)\n        if (i % 2 === 0) {\n          switch (temp) {\n            case 0:\n              temp = 1\n              break\n            case 1:\n              temp = 0\n              break\n            case 2:\n              temp = 5\n              break\n            case 3:\n              temp = 7\n              break\n            case 4:\n              temp = 9\n              break\n            default:\n              temp = temp * 2 + 3\n          }\n        }\n        total += temp\n      }\n\n      // Establish check digit using modulus 26, and translate to char. equivalent.\n      total = total % 26\n      total = String.fromCharCode(total + 65)\n\n      // Check to see if the check digit given is correct\n      expect = vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.czech_republic = {\n    name: 'Czech Republic',\n    codes: ['CZ', 'CZE', '203'],\n    calcFn: function(vat) {\n      function _isLegalEntities(vat, rules) {\n        var total = 0\n\n        if (rules.additional[0].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var i = 0; i < 7; i++) {\n            total += +vat.charAt(i) * rules.multipliers[i]\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11\n          if (total === 10) total = 0\n          if (total === 11) total = 1\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(7, 8)\n          return total === expect\n        }\n\n        return false\n      }\n\n      function _isIndividualType2(vat, rules) {\n        var total = 0\n\n        if (rules.additional[2].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var j = 0; j < 7; j++) {\n            total += +vat.charAt(j + 1) * rules.multipliers[j]\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11\n          if (total === 10) total = 0\n          if (total === 11) total = 1\n\n          // Convert calculated check digit according to a lookup table\n          var expect = +vat.slice(8, 9)\n          return rules.lookup[total - 1] === expect\n        }\n\n        return false\n      }\n\n      function _isIndividualType3(vat, rules) {\n        if (rules.additional[3].test(vat)) {\n          var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8)\n          var expect = +vat % 11 === 0\n          return !!(temp % 11 === 0 && expect)\n        }\n\n        return false\n      }\n\n      if (_isLegalEntities(vat, this.rules)) return true\n      if (_isIndividualType2(vat, this.rules)) return true\n      if (_isIndividualType3(vat, this.rules)) return true\n\n      return false\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n      regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n      additional: [\n        /^\\d{8}$/,\n        /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n        /^6\\d{8}$/,\n        /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.denmark = {\n    name: 'Denmark',\n    codes: ['DK', 'DNK', '208'],\n    calcFn: function(vat) {\n      var total = 0\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      return total % 11 === 0\n    },\n    rules: {\n      multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n      regex: [/^(DK)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.estonia = {\n    name: 'Estonia',\n    codes: ['EE', 'EST', '233'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 10.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n      regex: [/^(EE)(10\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.europe = {\n    name: 'Europe',\n    codes: ['EU', 'EUR', '000'], // TODO (S.Panfilov) that's not a real codes\n    calcFn: function() {\n      // We know little about EU numbers apart from the fact that the first 3 digits represent the\n      // country, and that there are nine digits in total.\n      return true\n    },\n    rules: {\n      regex: [/^(EU)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.finland = {\n    name: 'Finland',\n    codes: ['FI', 'FIN', '246'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i]\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [7, 9, 10, 5, 8, 4, 2],\n      regex: [/^(FI)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.france = {\n    name: 'France',\n    codes: ['FR', 'FRA', '250'],\n    calcFn: function(vat) {\n      var total\n      var expect\n\n      // Checks the check digits of a French VAT number.\n      if (!(/^\\d{11}$/).test(vat)) {\n        return true\n      }\n\n      // Extract the last nine digits as an integer.\n      total = +vat.substring(2)\n\n      // Establish check digit.\n      total = (total * 100 + 12) % 97\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(0, 2)\n      return total === expect\n    },\n    rules: {\n      regex: [\n        /^(FR)(\\d{11})$/,\n        /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.germany = {\n    name: 'Germany',\n    codes: ['DE', 'DEU', '276'],\n    calcFn: function(vat) {\n      // Checks the check digits of a German VAT number.\n      var product = 10\n      var sum = 0\n      var checkDigit = 0\n      var expect\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement peculiar algorithm!.\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Establish check digit.\n      if (11 - product === 10) {\n        checkDigit = 0\n      } else {\n        checkDigit = 11 - product\n      }\n\n      // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n      // check digit.\n      expect = +vat.slice(8, 9)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(DE)([1-9]\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.greece = {\n    name: 'Greece',\n    codes: ['GR', 'GRC', '300'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // eight character numbers should be prefixed with an 0.\n      if (vat.length === 8) {\n        vat = '0' + vat\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        256,\n        128,\n        64,\n        32,\n        16,\n        8,\n        4,\n        2\n      ],\n      regex: [/^(EL)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.hungary = {\n    name: 'Hungary',\n    codes: ['HU', 'HUN', '348'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        9,\n        7,\n        3,\n        1,\n        9,\n        7,\n        3\n      ],\n      regex: [/^(HU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.ireland = {\n    name: 'Ireland',\n    codes: ['IE', 'IRL', '372'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // If the code is type 1 format, we need to convert it to the new before performing the validation.\n      if (this.rules.typeFormats.first.test(vat)) {\n        vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8)\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // If the number is type 3 then we need to include the trailing A or H in the calculation\n      if (this.rules.typeFormats.third.test(vat)) {\n        // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n        if (vat.charAt(8) === 'H') {\n          total += 72\n        } else {\n          total += 9\n        }\n      }\n\n      // Establish check digit using modulus 23, and translate to char. equivalent.\n      total = total % 23\n      if (total === 0) {\n        total = 'W'\n      } else {\n        total = String.fromCharCode(total + 64)\n      }\n\n      // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      typeFormats: {\n        first: /^\\d[A-Z*+]/,\n        third: /^\\d{7}[A-Z][AH]$/\n      },\n      regex: [\n        /^(IE)(\\d{7}[A-W])$/,\n        /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/,\n        /^(IE)(\\d{7}[A-W][AH])$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.italy = {\n    name: 'Italy',\n    codes: ['IT', 'ITA', '380'],\n    calcFn: function(vat) {\n      var total = 0\n      var temp\n      var expect\n\n      // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n      if (+vat.slice(0, 7) === 0) {\n        return false\n      }\n\n      temp = +vat.slice(7, 10)\n      if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n        return false\n      }\n\n      // Extract the next digit and multiply by the appropriate\n      for (var i = 0; i < 10; i++) {\n        temp = +vat.charAt(i) * this.rules.multipliers[i]\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10\n        else\n          total += temp\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11)\n      return total === expect\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n      regex: [/^(IT)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.latvia = {\n    name: 'Latvia',\n    codes: ['LV', 'LVA', '428'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Differentiate between legal entities and natural bodies. For the latter we simply check that\n      // the first six digits correspond to valid DDMMYY dates.\n      if ((/^[0-3]/).test(vat)) {\n        return !!(/^[0-3][0-9][0-1][0-9]/).test(vat)\n      } else {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i]\n        }\n\n        // Establish check digits by getting modulus 11.\n        if (total % 11 === 4 && vat[0] === 9) total = total - 45\n\n        if (total % 11 === 4) {\n          total = 4 - total % 11\n        } else if (total % 11 > 4) {\n          total = 14 - total % 11\n        } else if (total % 11 < 4) {\n          total = 3 - total % 11\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n      regex: [/^(LV)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.lithuania = {\n    name: 'Lithuania',\n    codes: ['LT', 'LTU', '440'],\n    calcFn: function(vat) {\n      function _extractDigit(vat, multiplier, key) {\n        return +vat.charAt(key) * multiplier[key]\n      }\n\n      function _doubleCheckCalculation(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0\n          for (var i = 0; i < 8; i++) {\n            total += _extractDigit(vat, rules.multipliers.short, i)\n          }\n        }\n\n        return total\n      }\n\n      function extractDigit(vat, total) {\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * (i + 1)\n        }\n        return total\n      }\n\n      function checkDigit(total) {\n        total = total % 11\n        if (total === 10) {\n          total = 0\n        }\n\n        return total\n      }\n\n      function _check9DigitVat(vat, rules) {\n        // 9 character VAT numbers are for legal persons\n        var total = 0\n        if (vat.length === 9) {\n          // 8th character must be one\n          if (!(/^\\d{7}1/).test(vat)) return false\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit(vat, total)\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation(vat, total, rules)\n\n          // Establish check digit.\n          total = checkDigit(total)\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(8, 9)\n          return total === expect\n        }\n        return false\n      }\n\n      function extractDigit12(vat, total, rules) {\n        for (var k = 0; k < 11; k++) {\n          total += _extractDigit(vat, rules.multipliers.med, k)\n        }\n        return total\n      }\n\n      function _doubleCheckCalculation12(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0\n          for (var l = 0; l < 11; l++) {\n            total += _extractDigit(vat, rules.multipliers.alt, l)\n          }\n        }\n\n        return total\n      }\n\n      function _check12DigitVat(vat, rules) {\n        var total = 0\n\n        // 12 character VAT numbers are for temporarily registered taxpayers\n        if (vat.length === 12) {\n          // 11th character must be one\n          if (!(rules.check).test(vat)) return false\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit12(vat, total, rules)\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation12(vat, total, rules)\n\n          // Establish check digit.\n          total = checkDigit(total)\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(11, 12)\n          return total === expect\n        }\n\n        return false\n      }\n\n      return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules)\n    },\n    rules: {\n      multipliers: {\n        short: [3, 4, 5, 6, 7, 8, 9, 1],\n        med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n        alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n      },\n      check: /^\\d{10}1/,\n      regex: [/^(LT)(\\d{9}|\\d{12})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.luxembourg = {\n    name: 'Luxembourg',\n    codes: ['LU', 'LUX', '442'],\n    calcFn: function(vat) {\n      var expect = +vat.slice(6, 8)\n      var checkDigit = +vat.slice(0, 6) % 89\n      // Checks the check digits of a Luxembourg VAT number.\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(LU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.malta = {\n    name: 'Malta',\n    codes: ['MT', 'MLT', '470'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 6; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 37.\n      total = 37 - total % 37\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(6, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [3, 4, 6, 7, 8, 9],\n      regex: [/^(MT)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.netherlands = {\n    name: 'Netherlands',\n    codes: ['NL', 'NLD', '528'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NL)(\\d{9})B\\d{2}$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.norway = {\n    name: 'Norway',\n    codes: ['NO', 'NOR', '578'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n      // See http://www.brreg.no/english/coordination/number.html\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n      total = 11 - total % 11\n\n      if (total === 11) {\n        total = 0\n      }\n\n      if (total < 10) {\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NO)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.poland = {\n    name: 'Poland',\n    codes: ['PL', 'POL', '616'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n      return total === expect\n    },\n    rules: {\n      multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n      regex: [/^(PL)(\\d{10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.portugal = {\n    name: 'Portugal',\n    codes: ['PT', 'PRT', '620'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(PT)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.romania = {\n    name: 'Romania',\n    codes: ['RO', 'ROU', '642'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      var vatLength = vat.length\n      var multipliers = this.rules.multipliers.slice(10 - vatLength)\n\n      for (var i = 0; i < vat.length - 1; i++) {\n        total += +vat.charAt(i) * multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = (10 * total) % 11\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(vat.length - 1, vat.length)\n      return total === expect\n    },\n    rules: {\n      multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n      regex: [/^(RO)([1-9]\\d{1,9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.russia = {\n    name: 'Russian Federation',\n    codes: ['RU', 'RUS', '643'],\n    calcFn: function(vat) {\n      function _check10DigitINN(vat, rules) {\n        var total = 0\n\n        if (vat.length === 10) {\n          for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * rules.multipliers.m_1[i]\n          }\n\n          total = total % 11\n          if (total > 9) {\n            total = total % 10\n          }\n\n          // Compare it with the last character of the VAT number. If it is the same, then it's valid\n          var expect = +vat.slice(9, 10)\n          return total === expect\n        }\n\n        return false\n      }\n\n      function _check12DigitINN(vat, rules) {\n        var total1 = 0\n        var total2 = 0\n\n        if (vat.length === 12) {\n          for (var j = 0; j < 11; j++) {\n            total1 += +vat.charAt(j) * rules.multipliers.m_2[j]\n          }\n\n          total1 = total1 % 11\n\n          if (total1 > 9) {\n            total1 = total1 % 10\n          }\n\n          for (var k = 0; k < 11; k++) {\n            total2 += +vat.charAt(k) * rules.multipliers.m_3[k]\n          }\n\n          total2 = total2 % 11\n          if (total2 > 9) {\n            total2 = total2 % 10\n          }\n\n          // Compare the first check with the 11th character and the second check with the 12th and last\n          // character of the VAT number. If they're both the same, then it's valid\n          var expect = (total1 === +vat.slice(10, 11))\n          var expect2 = (total2 === +vat.slice(11, 12))\n          return (expect) && (expect2)\n        }\n\n        return false\n      }\n\n      // See http://russianpartner.biz/test_inn.html for algorithm\n      return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules)\n    },\n    rules: {\n      multipliers: {\n        m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n      },\n      regex: [/^(RU)(\\d{10}|\\d{12})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.serbia = {\n    name: 'Serbia',\n    codes: ['RS', 'SRB', '688'],\n    calcFn: function(vat) {\n      // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10\n      var sum = 0\n      var checkDigit\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      var expect = 1\n      checkDigit = (product + (+vat.slice(8, 9))) % 10\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(RS)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.slovakia_republic = {\n    name: 'Slovakia_',\n    codes: ['SK', 'SVK', '703'],\n    calcFn: function(vat) {\n      var expect = 0\n      var checkDigit = (vat % 11)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.slovenia = {\n    name: 'Slovenia',\n    codes: ['SI', 'SVN', '705'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 11\n      total = 11 - total % 11\n      if (total === 10) {\n        total = 0\n      }\n\n      // Compare the number with the last character of the VAT number. If it is the\n      // same, then it's a valid check digit.\n      expect = +vat.slice(7, 8)\n      return !!(total !== 11 && total === expect)\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(SI)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.spain = {\n    name: 'Spain',\n    codes: ['ES', 'ESP', '724'],\n    calcFn: function(vat) {\n      var i = 0\n      var total = 0\n      var temp\n      var expect\n\n      // National juridical entities\n      if (this.rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        if (total === 10) {\n          total = 0\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n\n      // Juridical entities other than national ones\n      else if (this.rules.additional[1].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        total = String.fromCharCode(total + 64)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(8, 9)\n        return total === expect\n      }\n\n      // Personal number (NIF) (starting with numeric of Y or Z)\n      else if (this.rules.additional[2].test(vat)) {\n        var tempnumber = vat\n        if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1')\n        if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2')\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23)\n        return tempnumber.charAt(8) === expect\n      }\n\n      // Personal number (NIF) (starting with K, L, M, or X)\n      else if (this.rules.additional[3].test(vat)) {\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23)\n        return vat.charAt(8) === expect\n      } else return false\n    },\n    rules: {\n      multipliers: [2, 1, 2, 1, 2, 1, 2],\n      regex: [\n        /^(ES)([A-Z]\\d{8})$/,\n        /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        /^(ES)([KLMX]\\d{7}[A-Z])$/\n      ],\n      additional: [\n        /^[A-H|J|U|V]\\d{8}$/,\n        /^[A-H|N-S|W]\\d{7}[A-J]$/,\n        /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n        /^[K|L|M|X]\\d{7}[A-Z]$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.sweden = {\n    name: 'Sweden',\n    codes: ['SE', 'SWE', '752'],\n    calcFn: function(vat) {\n      var expect\n\n      // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n      var R = 0\n      var digit\n      for (var i = 0; i < 9; i = i + 2) {\n        digit = +vat.charAt(i)\n        R += Math.floor(digit / 5) + ((digit * 2) % 10)\n      }\n\n      // Calculate S where S = C2 + C4 + C6 + C8\n      var S = 0\n      for (var j = 1; j < 9; j = j + 2) {\n        S += +vat.charAt(j)\n      }\n\n      var checkDigit = (10 - (R + S) % 10) % 10\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SE)(\\d{10}01)$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.switzerland = {\n    name: 'Switzerland',\n    codes: ['CH', 'CHE', '756'],\n    calcFn: function(vat) {\n      var total = 0\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total === 10) return false\n      if (total === 11) total = 0\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n      regex: [/^(CHE)(\\d{9})(MWST)?$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.united_kingdom = {\n    name: 'United Kingdom',\n    codes: ['GB', 'GBR', '826'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Government departments\n      if (vat.substr(0, 2) === 'GD') {\n        expect = 500\n        return vat.substr(2, 3) < expect\n      }\n\n      // Health authorities\n      if (vat.substr(0, 2) === 'HA') {\n        expect = 499\n        return vat.substr(2, 3) > expect\n      }\n\n      // Standard and commercial numbers\n\n      // 0 VAT numbers disallowed!\n      if (+vat.slice(0) === 0) return false\n\n      // Check range is OK for modulus 97 calculation\n      var no = +vat.slice(0, 7)\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n      // VAT number could use either system, so we check it against both.\n\n      // Establish check digits by subtracting 97 from total until negative.\n      var checkDigit = total\n      while (checkDigit > 0) {\n        checkDigit = checkDigit - 97\n      }\n\n      // Get the absolute value and compare it with the last two characters of the VAT number. If the\n      // same, then it is a valid traditional check digit. However, even then the number must fit within\n      // certain specified ranges.\n      checkDigit = Math.abs(checkDigit)\n      if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true\n\n      // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n      if (checkDigit >= 55)\n        checkDigit = checkDigit - 55\n      else\n        checkDigit = checkDigit + 42\n      expect = +vat.slice(7, 9)\n      return !!(checkDigit === expect && no > 1000000)\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [\n        /^(GB)?(\\d{9})$/,\n        /^(GB)?(\\d{12})$/,\n        /^(GB)?(GD\\d{3})$/,\n        /^(GB)?(HA\\d{3})$/\n      ]\n    }\n  }\n\n\n  //Support of node.js\n\n  if (typeof module === 'object' && module.exports) module.exports = exports\n\n  return exports\n\n})()"]},"metadata":{},"sourceType":"script"}